   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"signalProcessing - Copy.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	seuil_detection
  18              		.section	.data.seuil_detection,"aw",%progbits
  19              		.align	1
  22              	seuil_detection:
  23 0000 C800     		.short	200
  24              		.global	min_d2
  25              		.section	.bss.min_d2,"aw",%nobits
  26              		.align	1
  29              	min_d2:
  30 0000 0000     		.space	2
  31              		.global	max_d2
  32              		.section	.bss.max_d2,"aw",%nobits
  33              		.align	1
  36              	max_d2:
  37 0000 0000     		.space	2
  38              		.section	.text.getLinePos,"ax",%progbits
  39              		.align	2
  40              		.global	getLinePos
  41              		.code	16
  42              		.thumb_func
  44              	getLinePos:
  45              	.LFB0:
  46              		.file 1 "../Sources/signalProcessing - Copy.c"
   1:../Sources/signalProcessing - Copy.c **** #include "derivative.h" /* include peripheral declarations */
   2:../Sources/signalProcessing - Copy.c **** #include "TFC\TFC.h"
   3:../Sources/signalProcessing - Copy.c **** #include "constants.h"
   4:../Sources/signalProcessing - Copy.c **** #include "signalProcessing.h"
   5:../Sources/signalProcessing - Copy.c **** 
   6:../Sources/signalProcessing - Copy.c **** extern int8_t cur_state;
   7:../Sources/signalProcessing - Copy.c **** uint16_t seuil_detection=200;
   8:../Sources/signalProcessing - Copy.c **** int16_t min_d2 =0, max_d2 =0;
   9:../Sources/signalProcessing - Copy.c **** 	
  10:../Sources/signalProcessing - Copy.c **** uint16_t getLinePos( uint16_t  *LineScanImage)
  11:../Sources/signalProcessing - Copy.c **** {
  47              		.loc 1 11 0
  48              		.cfi_startproc
  49 0000 80B5     		push	{r7, lr}
  50              	.LCFI0:
  51              		.cfi_def_cfa_offset 8
  52              		.cfi_offset 7, -8
  53              		.cfi_offset 14, -4
  54 0002 C6B0     		sub	sp, sp, #280
  55              	.LCFI1:
  56              		.cfi_def_cfa_offset 288
  57 0004 00AF     		add	r7, sp, #0
  58              	.LCFI2:
  59              		.cfi_def_cfa_register 7
  60 0006 7860     		str	r0, [r7, #4]
  12:../Sources/signalProcessing - Copy.c **** 	unsigned char i ;
  13:../Sources/signalProcessing - Copy.c **** 	
  14:../Sources/signalProcessing - Copy.c **** 	//int16_t derivate[128] = {0};
  15:../Sources/signalProcessing - Copy.c **** 	int16_t derivate2[128] ={0};
  61              		.loc 1 15 0
  62 0008 C84B     		ldr	r3, .L22
  63 000a 8C20     		mov	r0, #140
  64 000c 4000     		lsl	r0, r0, #1
  65 000e C019     		add	r0, r0, r7
  66 0010 C318     		add	r3, r0, r3
  67 0012 1A1C     		mov	r2, r3
  68 0014 8023     		mov	r3, #128
  69 0016 5B00     		lsl	r3, r3, #1
  70 0018 101C     		mov	r0, r2
  71 001a 0021     		mov	r1, #0
  72 001c 1A1C     		mov	r2, r3
  73 001e FFF7FEFF 		bl	memset
  16:../Sources/signalProcessing - Copy.c **** 	
  17:../Sources/signalProcessing - Copy.c **** 	/* calcul de la dérivée seconde  + min et max */
  18:../Sources/signalProcessing - Copy.c **** 	for (i=2; i < 128; i++)
  74              		.loc 1 18 0
  75 0022 C349     		ldr	r1, .L22+4
  76 0024 7B18     		add	r3, r7, r1
  77 0026 0222     		mov	r2, #2
  78 0028 1A70     		strb	r2, [r3]
  79 002a 69E0     		b	.L2
  80              	.L6:
  19:../Sources/signalProcessing - Copy.c **** 	{
  20:../Sources/signalProcessing - Copy.c **** 		derivate2[i] = (LineScanImage[i] + LineScanImage[i-2])/2 - LineScanImage[i-1];
  81              		.loc 1 20 0
  82 002c C04A     		ldr	r2, .L22+4
  83 002e BB18     		add	r3, r7, r2
  84 0030 1A78     		ldrb	r2, [r3]
  85 0032 BF48     		ldr	r0, .L22+4
  86 0034 3B18     		add	r3, r7, r0
  87 0036 1B78     		ldrb	r3, [r3]
  88 0038 5B00     		lsl	r3, r3, #1
  89 003a 7968     		ldr	r1, [r7, #4]
  90 003c CB18     		add	r3, r1, r3
  91 003e 1B88     		ldrh	r3, [r3]
  92 0040 191C     		mov	r1, r3
  93 0042 BB48     		ldr	r0, .L22+4
  94 0044 3B18     		add	r3, r7, r0
  95 0046 1B78     		ldrb	r3, [r3]
  96 0048 023B     		sub	r3, r3, #2
  97 004a 5B00     		lsl	r3, r3, #1
  98 004c 7868     		ldr	r0, [r7, #4]
  99 004e C318     		add	r3, r0, r3
 100 0050 1B88     		ldrh	r3, [r3]
 101 0052 CB18     		add	r3, r1, r3
 102 0054 002B     		cmp	r3, #0
 103 0056 00DA     		bge	.L3
 104 0058 0133     		add	r3, r3, #1
 105              	.L3:
 106 005a 5B10     		asr	r3, r3, #1
 107 005c 99B2     		uxth	r1, r3
 108 005e B448     		ldr	r0, .L22+4
 109 0060 3B18     		add	r3, r7, r0
 110 0062 1B78     		ldrb	r3, [r3]
 111 0064 013B     		sub	r3, r3, #1
 112 0066 5B00     		lsl	r3, r3, #1
 113 0068 7868     		ldr	r0, [r7, #4]
 114 006a C318     		add	r3, r0, r3
 115 006c 1B88     		ldrh	r3, [r3]
 116 006e CB1A     		sub	r3, r1, r3
 117 0070 9BB2     		uxth	r3, r3
 118 0072 99B2     		uxth	r1, r3
 119 0074 AD4B     		ldr	r3, .L22
 120 0076 8C20     		mov	r0, #140
 121 0078 4000     		lsl	r0, r0, #1
 122 007a C019     		add	r0, r0, r7
 123 007c C318     		add	r3, r0, r3
 124 007e 5200     		lsl	r2, r2, #1
 125 0080 D152     		strh	r1, [r2, r3]
  21:../Sources/signalProcessing - Copy.c **** 		if(derivate2[i] < min_d2) min_d2 = derivate2[i];
 126              		.loc 1 21 0
 127 0082 AB49     		ldr	r1, .L22+4
 128 0084 7B18     		add	r3, r7, r1
 129 0086 1A78     		ldrb	r2, [r3]
 130 0088 A84B     		ldr	r3, .L22
 131 008a 8C20     		mov	r0, #140
 132 008c 4000     		lsl	r0, r0, #1
 133 008e C019     		add	r0, r0, r7
 134 0090 C318     		add	r3, r0, r3
 135 0092 5200     		lsl	r2, r2, #1
 136 0094 D25A     		ldrh	r2, [r2, r3]
 137 0096 A74B     		ldr	r3, .L22+8
 138 0098 1B88     		ldrh	r3, [r3]
 139 009a 12B2     		sxth	r2, r2
 140 009c 1BB2     		sxth	r3, r3
 141 009e 9A42     		cmp	r2, r3
 142 00a0 0BDA     		bge	.L4
 143              		.loc 1 21 0 is_stmt 0
 144 00a2 A349     		ldr	r1, .L22+4
 145 00a4 7B18     		add	r3, r7, r1
 146 00a6 1A78     		ldrb	r2, [r3]
 147 00a8 A04B     		ldr	r3, .L22
 148 00aa 8C20     		mov	r0, #140
 149 00ac 4000     		lsl	r0, r0, #1
 150 00ae C019     		add	r0, r0, r7
 151 00b0 C318     		add	r3, r0, r3
 152 00b2 5200     		lsl	r2, r2, #1
 153 00b4 D25A     		ldrh	r2, [r2, r3]
 154 00b6 9F4B     		ldr	r3, .L22+8
 155 00b8 1A80     		strh	r2, [r3]
 156              	.L4:
  22:../Sources/signalProcessing - Copy.c **** 		if(derivate2[i] > max_d2) max_d2 = derivate2[i];
 157              		.loc 1 22 0 is_stmt 1
 158 00ba 9D49     		ldr	r1, .L22+4
 159 00bc 7B18     		add	r3, r7, r1
 160 00be 1A78     		ldrb	r2, [r3]
 161 00c0 9A4B     		ldr	r3, .L22
 162 00c2 8C20     		mov	r0, #140
 163 00c4 4000     		lsl	r0, r0, #1
 164 00c6 C019     		add	r0, r0, r7
 165 00c8 C318     		add	r3, r0, r3
 166 00ca 5200     		lsl	r2, r2, #1
 167 00cc D25A     		ldrh	r2, [r2, r3]
 168 00ce 9A4B     		ldr	r3, .L22+12
 169 00d0 1B88     		ldrh	r3, [r3]
 170 00d2 12B2     		sxth	r2, r2
 171 00d4 1BB2     		sxth	r3, r3
 172 00d6 9A42     		cmp	r2, r3
 173 00d8 0BDD     		ble	.L5
 174              		.loc 1 22 0 is_stmt 0
 175 00da 9549     		ldr	r1, .L22+4
 176 00dc 7B18     		add	r3, r7, r1
 177 00de 1A78     		ldrb	r2, [r3]
 178 00e0 924B     		ldr	r3, .L22
 179 00e2 8C20     		mov	r0, #140
 180 00e4 4000     		lsl	r0, r0, #1
 181 00e6 C019     		add	r0, r0, r7
 182 00e8 C318     		add	r3, r0, r3
 183 00ea 5200     		lsl	r2, r2, #1
 184 00ec D25A     		ldrh	r2, [r2, r3]
 185 00ee 924B     		ldr	r3, .L22+12
 186 00f0 1A80     		strh	r2, [r3]
 187              	.L5:
  18:../Sources/signalProcessing - Copy.c **** 	for (i=2; i < 128; i++)
 188              		.loc 1 18 0 is_stmt 1
 189 00f2 8F49     		ldr	r1, .L22+4
 190 00f4 7B18     		add	r3, r7, r1
 191 00f6 8E48     		ldr	r0, .L22+4
 192 00f8 3A18     		add	r2, r7, r0
 193 00fa 1278     		ldrb	r2, [r2]
 194 00fc 0132     		add	r2, r2, #1
 195 00fe 1A70     		strb	r2, [r3]
 196              	.L2:
  18:../Sources/signalProcessing - Copy.c **** 	for (i=2; i < 128; i++)
 197              		.loc 1 18 0 is_stmt 0
 198 0100 8B49     		ldr	r1, .L22+4
 199 0102 7B18     		add	r3, r7, r1
 200 0104 1B78     		ldrb	r3, [r3]
 201 0106 5BB2     		sxtb	r3, r3
 202 0108 002B     		cmp	r3, #0
 203 010a 8FDA     		bge	.L6
  23:../Sources/signalProcessing - Copy.c **** 	}
  24:../Sources/signalProcessing - Copy.c **** 
  25:../Sources/signalProcessing - Copy.c **** 
  26:../Sources/signalProcessing - Copy.c **** 	int16_t detect_pic = 0;
 204              		.loc 1 26 0 is_stmt 1
 205 010c 8A22     		mov	r2, #138
 206 010e 5200     		lsl	r2, r2, #1
 207 0110 BB18     		add	r3, r7, r2
 208 0112 0022     		mov	r2, #0
 209 0114 1A80     		strh	r2, [r3]
  27:../Sources/signalProcessing - Copy.c **** 	int16_t debut_l=0;
 210              		.loc 1 27 0
 211 0116 8920     		mov	r0, #137
 212 0118 4000     		lsl	r0, r0, #1
 213 011a 3B18     		add	r3, r7, r0
 214 011c 0022     		mov	r2, #0
 215 011e 1A80     		strh	r2, [r3]
  28:../Sources/signalProcessing - Copy.c **** 	int16_t fin_l=0;
 216              		.loc 1 28 0
 217 0120 8821     		mov	r1, #136
 218 0122 4900     		lsl	r1, r1, #1
 219 0124 7B18     		add	r3, r7, r1
 220 0126 0022     		mov	r2, #0
 221 0128 1A80     		strh	r2, [r3]
  29:../Sources/signalProcessing - Copy.c **** 	
  30:../Sources/signalProcessing - Copy.c **** 	static uint16_t posLine[7] = {60,0}; // posline[0] est utilisé pour la valeur choisie (précédente)
  31:../Sources/signalProcessing - Copy.c **** 	uint16_t index_debut_l = 0 ;
 222              		.loc 1 31 0
 223 012a 8722     		mov	r2, #135
 224 012c 5200     		lsl	r2, r2, #1
 225 012e BB18     		add	r3, r7, r2
 226 0130 0022     		mov	r2, #0
 227 0132 1A80     		strh	r2, [r3]
  32:../Sources/signalProcessing - Copy.c **** 	uint16_t linewidth = 0;
 228              		.loc 1 32 0
 229 0134 8420     		mov	r0, #132
 230 0136 4000     		lsl	r0, r0, #1
 231 0138 3B18     		add	r3, r7, r0
 232 013a 0022     		mov	r2, #0
 233 013c 1A80     		strh	r2, [r3]
  33:../Sources/signalProcessing - Copy.c **** 	uint8_t nb_line=0;
 234              		.loc 1 33 0
 235 013e 7F49     		ldr	r1, .L22+16
 236 0140 7B18     		add	r3, r7, r1
 237 0142 0022     		mov	r2, #0
 238 0144 1A70     		strb	r2, [r3]
  34:../Sources/signalProcessing - Copy.c **** 	
  35:../Sources/signalProcessing - Copy.c **** 	for (i = LIMITCAMMIN+1;i <= LIMITCAMMAX;i++) {
 239              		.loc 1 35 0
 240 0146 7A4A     		ldr	r2, .L22+4
 241 0148 BB18     		add	r3, r7, r2
 242 014a 1522     		mov	r2, #21
 243 014c 1A70     		strb	r2, [r3]
 244 014e D4E0     		b	.L7
 245              	.L16:
  36:../Sources/signalProcessing - Copy.c **** 		if ( derivate2[i] <= -seuil_detection)// Detection de la pente descende
 246              		.loc 1 36 0
 247 0150 7748     		ldr	r0, .L22+4
 248 0152 3B18     		add	r3, r7, r0
 249 0154 1A78     		ldrb	r2, [r3]
 250 0156 754B     		ldr	r3, .L22
 251 0158 8C21     		mov	r1, #140
 252 015a 4900     		lsl	r1, r1, #1
 253 015c C919     		add	r1, r1, r7
 254 015e CB18     		add	r3, r1, r3
 255 0160 5200     		lsl	r2, r2, #1
 256 0162 D35A     		ldrh	r3, [r2, r3]
 257 0164 1AB2     		sxth	r2, r3
 258 0166 764B     		ldr	r3, .L22+20
 259 0168 1B88     		ldrh	r3, [r3]
 260 016a 5B42     		neg	r3, r3
 261 016c 9A42     		cmp	r2, r3
 262 016e 06DC     		bgt	.L8
  37:../Sources/signalProcessing - Copy.c **** 			detect_pic = -1;
 263              		.loc 1 37 0
 264 0170 8A22     		mov	r2, #138
 265 0172 5200     		lsl	r2, r2, #1
 266 0174 BB18     		add	r3, r7, r2
 267 0176 0122     		mov	r2, #1
 268 0178 5242     		neg	r2, r2
 269 017a 1A80     		strh	r2, [r3]
 270 017c 19E0     		b	.L9
 271              	.L8:
  38:../Sources/signalProcessing - Copy.c **** 		else if ( derivate2[i] >= seuil_detection)// Pente qui monte
 272              		.loc 1 38 0
 273 017e 6C48     		ldr	r0, .L22+4
 274 0180 3B18     		add	r3, r7, r0
 275 0182 1A78     		ldrb	r2, [r3]
 276 0184 694B     		ldr	r3, .L22
 277 0186 8C21     		mov	r1, #140
 278 0188 4900     		lsl	r1, r1, #1
 279 018a C919     		add	r1, r1, r7
 280 018c CB18     		add	r3, r1, r3
 281 018e 5200     		lsl	r2, r2, #1
 282 0190 D35A     		ldrh	r3, [r2, r3]
 283 0192 1AB2     		sxth	r2, r3
 284 0194 6A4B     		ldr	r3, .L22+20
 285 0196 1B88     		ldrh	r3, [r3]
 286 0198 9A42     		cmp	r2, r3
 287 019a 05DB     		blt	.L10
  39:../Sources/signalProcessing - Copy.c **** 			detect_pic = 1;
 288              		.loc 1 39 0
 289 019c 8A22     		mov	r2, #138
 290 019e 5200     		lsl	r2, r2, #1
 291 01a0 BB18     		add	r3, r7, r2
 292 01a2 0122     		mov	r2, #1
 293 01a4 1A80     		strh	r2, [r3]
 294 01a6 04E0     		b	.L9
 295              	.L10:
  40:../Sources/signalProcessing - Copy.c **** 		else
  41:../Sources/signalProcessing - Copy.c **** 			detect_pic = 0;
 296              		.loc 1 41 0
 297 01a8 8A20     		mov	r0, #138
 298 01aa 4000     		lsl	r0, r0, #1
 299 01ac 3B18     		add	r3, r7, r0
 300 01ae 0022     		mov	r2, #0
 301 01b0 1A80     		strh	r2, [r3]
 302              	.L9:
  42:../Sources/signalProcessing - Copy.c **** 
  43:../Sources/signalProcessing - Copy.c **** 		//TERMINAL_PRINTF("detect_pic %d debut_l %d fin_l %d \n\r",detect_pic, debut_l, fin_l );
  44:../Sources/signalProcessing - Copy.c **** 		if (detect_pic == -1 && debut_l==0 && fin_l==0)
 303              		.loc 1 44 0
 304 01b2 8A21     		mov	r1, #138
 305 01b4 4900     		lsl	r1, r1, #1
 306 01b6 7B18     		add	r3, r7, r1
 307 01b8 0022     		mov	r2, #0
 308 01ba 9B5E     		ldrsh	r3, [r3, r2]
 309 01bc 0133     		add	r3, r3, #1
 310 01be 1AD1     		bne	.L11
 311              		.loc 1 44 0 is_stmt 0
 312 01c0 8920     		mov	r0, #137
 313 01c2 4000     		lsl	r0, r0, #1
 314 01c4 3B18     		add	r3, r7, r0
 315 01c6 0021     		mov	r1, #0
 316 01c8 5B5E     		ldrsh	r3, [r3, r1]
 317 01ca 002B     		cmp	r3, #0
 318 01cc 13D1     		bne	.L11
 319 01ce 8822     		mov	r2, #136
 320 01d0 5200     		lsl	r2, r2, #1
 321 01d2 BB18     		add	r3, r7, r2
 322 01d4 0020     		mov	r0, #0
 323 01d6 1B5E     		ldrsh	r3, [r3, r0]
 324 01d8 002B     		cmp	r3, #0
 325 01da 0CD1     		bne	.L11
  45:../Sources/signalProcessing - Copy.c **** 		{ /* début ligne possible */
  46:../Sources/signalProcessing - Copy.c **** 			debut_l = 1;
 326              		.loc 1 46 0 is_stmt 1
 327 01dc 8921     		mov	r1, #137
 328 01de 4900     		lsl	r1, r1, #1
 329 01e0 7B18     		add	r3, r7, r1
 330 01e2 0122     		mov	r2, #1
 331 01e4 1A80     		strh	r2, [r3]
  47:../Sources/signalProcessing - Copy.c **** 			index_debut_l = i;
 332              		.loc 1 47 0
 333 01e6 8722     		mov	r2, #135
 334 01e8 5200     		lsl	r2, r2, #1
 335 01ea BB18     		add	r3, r7, r2
 336 01ec 5048     		ldr	r0, .L22+4
 337 01ee 3A18     		add	r2, r7, r0
 338 01f0 1278     		ldrb	r2, [r2]
 339 01f2 1A80     		strh	r2, [r3]
 340 01f4 7AE0     		b	.L12
 341              	.L11:
  48:../Sources/signalProcessing - Copy.c **** 		}
  49:../Sources/signalProcessing - Copy.c **** 		else if (detect_pic == 1 && debut_l ==1 && fin_l==0)
 342              		.loc 1 49 0
 343 01f6 8A21     		mov	r1, #138
 344 01f8 4900     		lsl	r1, r1, #1
 345 01fa 7B18     		add	r3, r7, r1
 346 01fc 0022     		mov	r2, #0
 347 01fe 9B5E     		ldrsh	r3, [r3, r2]
 348 0200 012B     		cmp	r3, #1
 349 0202 18D1     		bne	.L13
 350              		.loc 1 49 0 is_stmt 0
 351 0204 8920     		mov	r0, #137
 352 0206 4000     		lsl	r0, r0, #1
 353 0208 3B18     		add	r3, r7, r0
 354 020a 0021     		mov	r1, #0
 355 020c 5B5E     		ldrsh	r3, [r3, r1]
 356 020e 012B     		cmp	r3, #1
 357 0210 11D1     		bne	.L13
 358 0212 8822     		mov	r2, #136
 359 0214 5200     		lsl	r2, r2, #1
 360 0216 BB18     		add	r3, r7, r2
 361 0218 0020     		mov	r0, #0
 362 021a 1B5E     		ldrsh	r3, [r3, r0]
 363 021c 002B     		cmp	r3, #0
 364 021e 0AD1     		bne	.L13
  50:../Sources/signalProcessing - Copy.c **** 		{ /* confirmation début ligne */
  51:../Sources/signalProcessing - Copy.c **** 			debut_l = 0;
 365              		.loc 1 51 0 is_stmt 1
 366 0220 8921     		mov	r1, #137
 367 0222 4900     		lsl	r1, r1, #1
 368 0224 7B18     		add	r3, r7, r1
 369 0226 0022     		mov	r2, #0
 370 0228 1A80     		strh	r2, [r3]
  52:../Sources/signalProcessing - Copy.c **** 			fin_l=1;
 371              		.loc 1 52 0
 372 022a 8822     		mov	r2, #136
 373 022c 5200     		lsl	r2, r2, #1
 374 022e BB18     		add	r3, r7, r2
 375 0230 0122     		mov	r2, #1
 376 0232 1A80     		strh	r2, [r3]
 377 0234 5AE0     		b	.L12
 378              	.L13:
  53:../Sources/signalProcessing - Copy.c **** 		}
  54:../Sources/signalProcessing - Copy.c **** 		else if ( detect_pic == -1 && debut_l==0 && fin_l==1)
 379              		.loc 1 54 0
 380 0236 8A20     		mov	r0, #138
 381 0238 4000     		lsl	r0, r0, #1
 382 023a 3B18     		add	r3, r7, r0
 383 023c 0021     		mov	r1, #0
 384 023e 5B5E     		ldrsh	r3, [r3, r1]
 385 0240 0133     		add	r3, r3, #1
 386 0242 3FD1     		bne	.L14
 387              		.loc 1 54 0 is_stmt 0
 388 0244 8922     		mov	r2, #137
 389 0246 5200     		lsl	r2, r2, #1
 390 0248 BB18     		add	r3, r7, r2
 391 024a 0020     		mov	r0, #0
 392 024c 1B5E     		ldrsh	r3, [r3, r0]
 393 024e 002B     		cmp	r3, #0
 394 0250 38D1     		bne	.L14
 395 0252 8821     		mov	r1, #136
 396 0254 4900     		lsl	r1, r1, #1
 397 0256 7B18     		add	r3, r7, r1
 398 0258 0022     		mov	r2, #0
 399 025a 9B5E     		ldrsh	r3, [r3, r2]
 400 025c 012B     		cmp	r3, #1
 401 025e 31D1     		bne	.L14
  55:../Sources/signalProcessing - Copy.c **** 		{ /* attente fin ligne */
  56:../Sources/signalProcessing - Copy.c **** 			linewidth = i+index_debut_l;
 402              		.loc 1 56 0 is_stmt 1
 403 0260 3348     		ldr	r0, .L22+4
 404 0262 3B18     		add	r3, r7, r0
 405 0264 1B78     		ldrb	r3, [r3]
 406 0266 99B2     		uxth	r1, r3
 407 0268 8422     		mov	r2, #132
 408 026a 5200     		lsl	r2, r2, #1
 409 026c BB18     		add	r3, r7, r2
 410 026e 8720     		mov	r0, #135
 411 0270 4000     		lsl	r0, r0, #1
 412 0272 3A18     		add	r2, r7, r0
 413 0274 1288     		ldrh	r2, [r2]
 414 0276 8A18     		add	r2, r1, r2
 415 0278 1A80     		strh	r2, [r3]
  57:../Sources/signalProcessing - Copy.c **** 			if(linewidth >= 6) // taille mini pour rejeter les faux positifs
 416              		.loc 1 57 0
 417 027a 8421     		mov	r1, #132
 418 027c 4900     		lsl	r1, r1, #1
 419 027e 7B18     		add	r3, r7, r1
 420 0280 1B88     		ldrh	r3, [r3]
 421 0282 052B     		cmp	r3, #5
 422 0284 13D9     		bls	.L15
  58:../Sources/signalProcessing - Copy.c **** 			{
  59:../Sources/signalProcessing - Copy.c **** 				posLine[nb_line+1] = linewidth/2; /* Line found */
 423              		.loc 1 59 0
 424 0286 2D4A     		ldr	r2, .L22+16
 425 0288 BB18     		add	r3, r7, r2
 426 028a 1B78     		ldrb	r3, [r3]
 427 028c 5A1C     		add	r2, r3, #1
 428 028e 8420     		mov	r0, #132
 429 0290 4000     		lsl	r0, r0, #1
 430 0292 3B18     		add	r3, r7, r0
 431 0294 1B88     		ldrh	r3, [r3]
 432 0296 5B08     		lsr	r3, r3, #1
 433 0298 99B2     		uxth	r1, r3
 434 029a 2A4B     		ldr	r3, .L22+24
 435 029c 5200     		lsl	r2, r2, #1
 436 029e D152     		strh	r1, [r2, r3]
  60:../Sources/signalProcessing - Copy.c **** 				nb_line++;
 437              		.loc 1 60 0
 438 02a0 2649     		ldr	r1, .L22+16
 439 02a2 7B18     		add	r3, r7, r1
 440 02a4 2548     		ldr	r0, .L22+16
 441 02a6 3A18     		add	r2, r7, r0
 442 02a8 1278     		ldrb	r2, [r2]
 443 02aa 0132     		add	r2, r2, #1
 444 02ac 1A70     		strb	r2, [r3]
 445              	.L15:
  61:../Sources/signalProcessing - Copy.c **** 			}
  62:../Sources/signalProcessing - Copy.c **** 			debut_l=0;
 446              		.loc 1 62 0
 447 02ae 8921     		mov	r1, #137
 448 02b0 4900     		lsl	r1, r1, #1
 449 02b2 7B18     		add	r3, r7, r1
 450 02b4 0022     		mov	r2, #0
 451 02b6 1A80     		strh	r2, [r3]
  63:../Sources/signalProcessing - Copy.c **** 			fin_l=0;
 452              		.loc 1 63 0
 453 02b8 8822     		mov	r2, #136
 454 02ba 5200     		lsl	r2, r2, #1
 455 02bc BB18     		add	r3, r7, r2
 456 02be 0022     		mov	r2, #0
 457 02c0 1A80     		strh	r2, [r3]
 458 02c2 13E0     		b	.L12
 459              	.L14:
  64:../Sources/signalProcessing - Copy.c **** 			//break;
  65:../Sources/signalProcessing - Copy.c **** 		}
  66:../Sources/signalProcessing - Copy.c **** 		else if ((i-index_debut_l) >=15)
 460              		.loc 1 66 0
 461 02c4 1A48     		ldr	r0, .L22+4
 462 02c6 3B18     		add	r3, r7, r0
 463 02c8 1A78     		ldrb	r2, [r3]
 464 02ca 8721     		mov	r1, #135
 465 02cc 4900     		lsl	r1, r1, #1
 466 02ce 7B18     		add	r3, r7, r1
 467 02d0 1B88     		ldrh	r3, [r3]
 468 02d2 D31A     		sub	r3, r2, r3
 469 02d4 0E2B     		cmp	r3, #14
 470 02d6 09DD     		ble	.L12
  67:../Sources/signalProcessing - Copy.c **** 		{ /* une ligne trop longue n'est pas une ligne */
  68:../Sources/signalProcessing - Copy.c **** 			debut_l=0;
 471              		.loc 1 68 0
 472 02d8 8922     		mov	r2, #137
 473 02da 5200     		lsl	r2, r2, #1
 474 02dc BB18     		add	r3, r7, r2
 475 02de 0022     		mov	r2, #0
 476 02e0 1A80     		strh	r2, [r3]
  69:../Sources/signalProcessing - Copy.c **** 			fin_l=0;
 477              		.loc 1 69 0
 478 02e2 8820     		mov	r0, #136
 479 02e4 4000     		lsl	r0, r0, #1
 480 02e6 3B18     		add	r3, r7, r0
 481 02e8 0022     		mov	r2, #0
 482 02ea 1A80     		strh	r2, [r3]
 483              	.L12:
  35:../Sources/signalProcessing - Copy.c **** 	for (i = LIMITCAMMIN+1;i <= LIMITCAMMAX;i++) {
 484              		.loc 1 35 0
 485 02ec 1049     		ldr	r1, .L22+4
 486 02ee 7B18     		add	r3, r7, r1
 487 02f0 0F48     		ldr	r0, .L22+4
 488 02f2 3A18     		add	r2, r7, r0
 489 02f4 1278     		ldrb	r2, [r2]
 490 02f6 0132     		add	r2, r2, #1
 491 02f8 1A70     		strb	r2, [r3]
 492              	.L7:
  35:../Sources/signalProcessing - Copy.c **** 	for (i = LIMITCAMMIN+1;i <= LIMITCAMMAX;i++) {
 493              		.loc 1 35 0 is_stmt 0
 494 02fa 0D49     		ldr	r1, .L22+4
 495 02fc 7B18     		add	r3, r7, r1
 496 02fe 1B78     		ldrb	r3, [r3]
 497 0300 732B     		cmp	r3, #115
 498 0302 00D8     		bhi	.LCB424
 499 0304 24E7     		b	.L16	@long jump
 500              	.LCB424:
  70:../Sources/signalProcessing - Copy.c **** 		}
  71:../Sources/signalProcessing - Copy.c **** 	}
  72:../Sources/signalProcessing - Copy.c **** 	
  73:../Sources/signalProcessing - Copy.c **** 	uint8_t select=0;
 501              		.loc 1 73 0 is_stmt 1
 502 0306 8622     		mov	r2, #134
 503 0308 5200     		lsl	r2, r2, #1
 504 030a BB18     		add	r3, r7, r2
 505 030c 0022     		mov	r2, #0
 506 030e 1A70     		strb	r2, [r3]
  74:../Sources/signalProcessing - Copy.c **** 	uint16_t err_sel=0xFFFF;
 507              		.loc 1 74 0
 508 0310 8520     		mov	r0, #133
 509 0312 4000     		lsl	r0, r0, #1
 510 0314 3B18     		add	r3, r7, r0
 511 0316 0122     		mov	r2, #1
 512 0318 5242     		neg	r2, r2
 513 031a 1A80     		strh	r2, [r3]
  75:../Sources/signalProcessing - Copy.c **** 	/* on cherche la ligne détectée minimisant l'écart avec la position précédente */
  76:../Sources/signalProcessing - Copy.c **** 	for(i=nb_line; i!=0; i--)
 514              		.loc 1 76 0
 515 031c 0449     		ldr	r1, .L22+4
 516 031e 7B18     		add	r3, r7, r1
 517 0320 0648     		ldr	r0, .L22+16
 518 0322 3A18     		add	r2, r7, r0
 519 0324 1278     		ldrb	r2, [r2]
 520 0326 1A70     		strb	r2, [r3]
 521 0328 69E0     		b	.L17
 522              	.L23:
 523 032a C046     		.align	2
 524              	.L22:
 525 032c F0FEFFFF 		.word	-272
 526 0330 17010000 		.word	279
 527 0334 00000000 		.word	min_d2
 528 0338 00000000 		.word	max_d2
 529 033c 0D010000 		.word	269
 530 0340 00000000 		.word	seuil_detection
 531 0344 00000000 		.word	posLine.5177
 532              	.L20:
  77:../Sources/signalProcessing - Copy.c **** 	{
  78:../Sources/signalProcessing - Copy.c **** 		if(posLine[i]-posLine[0] < 0)
 533              		.loc 1 78 0
 534 0348 3749     		ldr	r1, .L24
 535 034a 7B18     		add	r3, r7, r1
 536 034c 1A78     		ldrb	r2, [r3]
 537 034e 374B     		ldr	r3, .L24+4
 538 0350 5200     		lsl	r2, r2, #1
 539 0352 D35A     		ldrh	r3, [r2, r3]
 540 0354 1A1C     		mov	r2, r3
 541 0356 354B     		ldr	r3, .L24+4
 542 0358 1B88     		ldrh	r3, [r3]
 543 035a D31A     		sub	r3, r2, r3
 544 035c 24D5     		bpl	.L18
  79:../Sources/signalProcessing - Copy.c **** 		{	
  80:../Sources/signalProcessing - Copy.c **** 			if(posLine[0]-posLine[i] < err_sel)
 545              		.loc 1 80 0
 546 035e 334B     		ldr	r3, .L24+4
 547 0360 1B88     		ldrh	r3, [r3]
 548 0362 1A1C     		mov	r2, r3
 549 0364 3048     		ldr	r0, .L24
 550 0366 3B18     		add	r3, r7, r0
 551 0368 1978     		ldrb	r1, [r3]
 552 036a 304B     		ldr	r3, .L24+4
 553 036c 4900     		lsl	r1, r1, #1
 554 036e CB5A     		ldrh	r3, [r1, r3]
 555 0370 D21A     		sub	r2, r2, r3
 556 0372 8521     		mov	r1, #133
 557 0374 4900     		lsl	r1, r1, #1
 558 0376 7B18     		add	r3, r7, r1
 559 0378 1B88     		ldrh	r3, [r3]
 560 037a 9A42     		cmp	r2, r3
 561 037c 38DA     		bge	.L19
  81:../Sources/signalProcessing - Copy.c **** 				{
  82:../Sources/signalProcessing - Copy.c **** 					err_sel=posLine[0]-posLine[i];
 562              		.loc 1 82 0
 563 037e 2B4B     		ldr	r3, .L24+4
 564 0380 1988     		ldrh	r1, [r3]
 565 0382 294A     		ldr	r2, .L24
 566 0384 BB18     		add	r3, r7, r2
 567 0386 1A78     		ldrb	r2, [r3]
 568 0388 284B     		ldr	r3, .L24+4
 569 038a 5200     		lsl	r2, r2, #1
 570 038c D25A     		ldrh	r2, [r2, r3]
 571 038e 8520     		mov	r0, #133
 572 0390 4000     		lsl	r0, r0, #1
 573 0392 3B18     		add	r3, r7, r0
 574 0394 8A1A     		sub	r2, r1, r2
 575 0396 1A80     		strh	r2, [r3]
  83:../Sources/signalProcessing - Copy.c **** 					select=i;
 576              		.loc 1 83 0
 577 0398 8621     		mov	r1, #134
 578 039a 4900     		lsl	r1, r1, #1
 579 039c 7B18     		add	r3, r7, r1
 580 039e 2248     		ldr	r0, .L24
 581 03a0 3A18     		add	r2, r7, r0
 582 03a2 1278     		ldrb	r2, [r2]
 583 03a4 1A70     		strb	r2, [r3]
 584 03a6 23E0     		b	.L19
 585              	.L18:
  84:../Sources/signalProcessing - Copy.c **** 				}
  85:../Sources/signalProcessing - Copy.c **** 		}
  86:../Sources/signalProcessing - Copy.c **** 		else
  87:../Sources/signalProcessing - Copy.c **** 		{
  88:../Sources/signalProcessing - Copy.c **** 			if(posLine[i]-posLine[0] < err_sel)
 586              		.loc 1 88 0
 587 03a8 1F49     		ldr	r1, .L24
 588 03aa 7B18     		add	r3, r7, r1
 589 03ac 1A78     		ldrb	r2, [r3]
 590 03ae 1F4B     		ldr	r3, .L24+4
 591 03b0 5200     		lsl	r2, r2, #1
 592 03b2 D35A     		ldrh	r3, [r2, r3]
 593 03b4 1A1C     		mov	r2, r3
 594 03b6 1D4B     		ldr	r3, .L24+4
 595 03b8 1B88     		ldrh	r3, [r3]
 596 03ba D21A     		sub	r2, r2, r3
 597 03bc 8520     		mov	r0, #133
 598 03be 4000     		lsl	r0, r0, #1
 599 03c0 3B18     		add	r3, r7, r0
 600 03c2 1B88     		ldrh	r3, [r3]
 601 03c4 9A42     		cmp	r2, r3
 602 03c6 13DA     		bge	.L19
  89:../Sources/signalProcessing - Copy.c **** 				{
  90:../Sources/signalProcessing - Copy.c **** 					err_sel=posLine[0]-posLine[i];
 603              		.loc 1 90 0
 604 03c8 184B     		ldr	r3, .L24+4
 605 03ca 1988     		ldrh	r1, [r3]
 606 03cc 164A     		ldr	r2, .L24
 607 03ce BB18     		add	r3, r7, r2
 608 03d0 1A78     		ldrb	r2, [r3]
 609 03d2 164B     		ldr	r3, .L24+4
 610 03d4 5200     		lsl	r2, r2, #1
 611 03d6 D25A     		ldrh	r2, [r2, r3]
 612 03d8 8520     		mov	r0, #133
 613 03da 4000     		lsl	r0, r0, #1
 614 03dc 3B18     		add	r3, r7, r0
 615 03de 8A1A     		sub	r2, r1, r2
 616 03e0 1A80     		strh	r2, [r3]
  91:../Sources/signalProcessing - Copy.c **** 		            select=i;
 617              		.loc 1 91 0
 618 03e2 8621     		mov	r1, #134
 619 03e4 4900     		lsl	r1, r1, #1
 620 03e6 7B18     		add	r3, r7, r1
 621 03e8 0F48     		ldr	r0, .L24
 622 03ea 3A18     		add	r2, r7, r0
 623 03ec 1278     		ldrb	r2, [r2]
 624 03ee 1A70     		strb	r2, [r3]
 625              	.L19:
  76:../Sources/signalProcessing - Copy.c **** 	for(i=nb_line; i!=0; i--)
 626              		.loc 1 76 0
 627 03f0 0D49     		ldr	r1, .L24
 628 03f2 7B18     		add	r3, r7, r1
 629 03f4 0C48     		ldr	r0, .L24
 630 03f6 3A18     		add	r2, r7, r0
 631 03f8 1278     		ldrb	r2, [r2]
 632 03fa 013A     		sub	r2, r2, #1
 633 03fc 1A70     		strb	r2, [r3]
 634              	.L17:
  76:../Sources/signalProcessing - Copy.c **** 	for(i=nb_line; i!=0; i--)
 635              		.loc 1 76 0 is_stmt 0
 636 03fe 0A49     		ldr	r1, .L24
 637 0400 7B18     		add	r3, r7, r1
 638 0402 1B78     		ldrb	r3, [r3]
 639 0404 002B     		cmp	r3, #0
 640 0406 9FD1     		bne	.L20
  92:../Sources/signalProcessing - Copy.c **** 				}
  93:../Sources/signalProcessing - Copy.c **** 		}
  94:../Sources/signalProcessing - Copy.c **** 	}
  95:../Sources/signalProcessing - Copy.c **** 	posLine[0]=posLine[select];
 641              		.loc 1 95 0 is_stmt 1
 642 0408 8622     		mov	r2, #134
 643 040a 5200     		lsl	r2, r2, #1
 644 040c BB18     		add	r3, r7, r2
 645 040e 1A78     		ldrb	r2, [r3]
 646 0410 064B     		ldr	r3, .L24+4
 647 0412 5200     		lsl	r2, r2, #1
 648 0414 D25A     		ldrh	r2, [r2, r3]
 649 0416 054B     		ldr	r3, .L24+4
 650 0418 1A80     		strh	r2, [r3]
  96:../Sources/signalProcessing - Copy.c **** 	
  97:../Sources/signalProcessing - Copy.c ****    //TERMINAL_PRINTF("\r nbline : %d \n\r", nb_line);
  98:../Sources/signalProcessing - Copy.c **** 	
  99:../Sources/signalProcessing - Copy.c **** 	return posLine[0];
 651              		.loc 1 99 0
 652 041a 044B     		ldr	r3, .L24+4
 653 041c 1B88     		ldrh	r3, [r3]
 100:../Sources/signalProcessing - Copy.c **** 	
 101:../Sources/signalProcessing - Copy.c **** }
 654              		.loc 1 101 0
 655 041e 181C     		mov	r0, r3
 656 0420 BD46     		mov	sp, r7
 657 0422 46B0     		add	sp, sp, #280
 658              		@ sp needed for prologue
 659 0424 80BD     		pop	{r7, pc}
 660              	.L25:
 661 0426 C046     		.align	2
 662              	.L24:
 663 0428 17010000 		.word	279
 664 042c 00000000 		.word	posLine.5177
 665              		.cfi_endproc
 666              	.LFE0:
 668              		.section	.text.minmaxcam,"ax",%progbits
 669              		.align	2
 670              		.global	minmaxcam
 671              		.code	16
 672              		.thumb_func
 674              	minmaxcam:
 675              	.LFB1:
 102:../Sources/signalProcessing - Copy.c **** 	
 103:../Sources/signalProcessing - Copy.c **** 
 104:../Sources/signalProcessing - Copy.c **** void minmaxcam (int16_t  *table ,int16_t  *min ,int16_t  *max)
 105:../Sources/signalProcessing - Copy.c **** {
 676              		.loc 1 105 0
 677              		.cfi_startproc
 678 0000 80B5     		push	{r7, lr}
 679              	.LCFI3:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 86B0     		sub	sp, sp, #24
 684              	.LCFI4:
 685              		.cfi_def_cfa_offset 32
 686 0004 00AF     		add	r7, sp, #0
 687              	.LCFI5:
 688              		.cfi_def_cfa_register 7
 689 0006 F860     		str	r0, [r7, #12]
 690 0008 B960     		str	r1, [r7, #8]
 691 000a 7A60     		str	r2, [r7, #4]
 106:../Sources/signalProcessing - Copy.c **** 	unsigned char i;
 107:../Sources/signalProcessing - Copy.c **** 	*min = table[0]; *max = table[0];
 692              		.loc 1 107 0
 693 000c FB68     		ldr	r3, [r7, #12]
 694 000e 1A88     		ldrh	r2, [r3]
 695 0010 BB68     		ldr	r3, [r7, #8]
 696 0012 1A80     		strh	r2, [r3]
 697 0014 FB68     		ldr	r3, [r7, #12]
 698 0016 1A88     		ldrh	r2, [r3]
 699 0018 7B68     		ldr	r3, [r7, #4]
 700 001a 1A80     		strh	r2, [r3]
 108:../Sources/signalProcessing - Copy.c **** 	
 109:../Sources/signalProcessing - Copy.c **** 	for(i=1; i <128; i++)
 701              		.loc 1 109 0
 702 001c 3B1C     		mov	r3, r7
 703 001e 1733     		add	r3, r3, #23
 704 0020 0122     		mov	r2, #1
 705 0022 1A70     		strb	r2, [r3]
 706 0024 32E0     		b	.L27
 707              	.L30:
 110:../Sources/signalProcessing - Copy.c **** 	{
 111:../Sources/signalProcessing - Copy.c **** 		if(table[i] < *min)
 708              		.loc 1 111 0
 709 0026 3B1C     		mov	r3, r7
 710 0028 1733     		add	r3, r3, #23
 711 002a 1B78     		ldrb	r3, [r3]
 712 002c 5B00     		lsl	r3, r3, #1
 713 002e FA68     		ldr	r2, [r7, #12]
 714 0030 D318     		add	r3, r2, r3
 715 0032 1A88     		ldrh	r2, [r3]
 716 0034 BB68     		ldr	r3, [r7, #8]
 717 0036 1B88     		ldrh	r3, [r3]
 718 0038 12B2     		sxth	r2, r2
 719 003a 1BB2     		sxth	r3, r3
 720 003c 9A42     		cmp	r2, r3
 721 003e 08DA     		bge	.L28
 112:../Sources/signalProcessing - Copy.c **** 			*min = table[i];
 722              		.loc 1 112 0
 723 0040 3B1C     		mov	r3, r7
 724 0042 1733     		add	r3, r3, #23
 725 0044 1B78     		ldrb	r3, [r3]
 726 0046 5B00     		lsl	r3, r3, #1
 727 0048 FA68     		ldr	r2, [r7, #12]
 728 004a D318     		add	r3, r2, r3
 729 004c 1A88     		ldrh	r2, [r3]
 730 004e BB68     		ldr	r3, [r7, #8]
 731 0050 1A80     		strh	r2, [r3]
 732              	.L28:
 113:../Sources/signalProcessing - Copy.c **** 		if(table[i] > *max)
 733              		.loc 1 113 0
 734 0052 3B1C     		mov	r3, r7
 735 0054 1733     		add	r3, r3, #23
 736 0056 1B78     		ldrb	r3, [r3]
 737 0058 5B00     		lsl	r3, r3, #1
 738 005a FA68     		ldr	r2, [r7, #12]
 739 005c D318     		add	r3, r2, r3
 740 005e 1A88     		ldrh	r2, [r3]
 741 0060 7B68     		ldr	r3, [r7, #4]
 742 0062 1B88     		ldrh	r3, [r3]
 743 0064 12B2     		sxth	r2, r2
 744 0066 1BB2     		sxth	r3, r3
 745 0068 9A42     		cmp	r2, r3
 746 006a 08DD     		ble	.L29
 114:../Sources/signalProcessing - Copy.c **** 			*max = table[i];
 747              		.loc 1 114 0
 748 006c 3B1C     		mov	r3, r7
 749 006e 1733     		add	r3, r3, #23
 750 0070 1B78     		ldrb	r3, [r3]
 751 0072 5B00     		lsl	r3, r3, #1
 752 0074 FA68     		ldr	r2, [r7, #12]
 753 0076 D318     		add	r3, r2, r3
 754 0078 1A88     		ldrh	r2, [r3]
 755 007a 7B68     		ldr	r3, [r7, #4]
 756 007c 1A80     		strh	r2, [r3]
 757              	.L29:
 109:../Sources/signalProcessing - Copy.c **** 	for(i=1; i <128; i++)
 758              		.loc 1 109 0
 759 007e 3B1C     		mov	r3, r7
 760 0080 1733     		add	r3, r3, #23
 761 0082 3A1C     		mov	r2, r7
 762 0084 1732     		add	r2, r2, #23
 763 0086 1278     		ldrb	r2, [r2]
 764 0088 0132     		add	r2, r2, #1
 765 008a 1A70     		strb	r2, [r3]
 766              	.L27:
 109:../Sources/signalProcessing - Copy.c **** 	for(i=1; i <128; i++)
 767              		.loc 1 109 0 is_stmt 0
 768 008c 3B1C     		mov	r3, r7
 769 008e 1733     		add	r3, r3, #23
 770 0090 1B78     		ldrb	r3, [r3]
 771 0092 5BB2     		sxtb	r3, r3
 772 0094 002B     		cmp	r3, #0
 773 0096 C6DA     		bge	.L30
 115:../Sources/signalProcessing - Copy.c **** 	}
 116:../Sources/signalProcessing - Copy.c **** 	
 117:../Sources/signalProcessing - Copy.c **** }
 774              		.loc 1 117 0 is_stmt 1
 775 0098 BD46     		mov	sp, r7
 776 009a 06B0     		add	sp, sp, #24
 777              		@ sp needed for prologue
 778 009c 80BD     		pop	{r7, pc}
 779              		.cfi_endproc
 780              	.LFE1:
 782 009e C046     		.section	.data.posLine.5177,"aw",%progbits
 783              		.align	2
 786              	posLine.5177:
 787 0000 3C00     		.short	60
 788 0002 0000     		.short	0
 789 0004 00000000 		.space	10
 789      00000000 
 789      0000
 790 000e 0000     		.text
 791              	.Letext0:
 792              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
DEFINED SYMBOLS
                            *ABS*:00000000 signalProcessing - Copy.c
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:22     .data.seuil_detection:00000000 seuil_detection
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:19     .data.seuil_detection:00000000 $d
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:29     .bss.min_d2:00000000 min_d2
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:26     .bss.min_d2:00000000 $d
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:36     .bss.max_d2:00000000 max_d2
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:33     .bss.max_d2:00000000 $d
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:39     .text.getLinePos:00000000 $t
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:44     .text.getLinePos:00000000 getLinePos
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:525    .text.getLinePos:0000032c $d
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:786    .data.posLine.5177:00000000 posLine.5177
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:534    .text.getLinePos:00000348 $t
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:663    .text.getLinePos:00000428 $d
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:669    .text.minmaxcam:00000000 $t
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:674    .text.minmaxcam:00000000 minmaxcam
C:\Users\B48861\AppData\Local\Temp\ccJrQIPv.s:783    .data.posLine.5177:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
