   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_Servo.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	offsetServo
  18              		.section	.data.offsetServo,"aw",%progbits
  19              		.align	1
  22              	offsetServo:
  23 0000 C800     		.short	200
  24              		.global	__aeabi_idiv
  25              		.section	.text.TFC_SetServo,"ax",%progbits
  26              		.align	2
  27              		.global	TFC_SetServo
  28              		.code	16
  29              		.thumb_func
  31              	TFC_SetServo:
  32              	.LFB0:
  33              		.file 1 "../Sources/TFC/TFC_Servo.c"
   1:../Sources/TFC/TFC_Servo.c **** #include "TFC\TFC.h"
   2:../Sources/TFC/TFC_Servo.c **** #include "constants.h"
   3:../Sources/TFC/TFC_Servo.c **** 
   4:../Sources/TFC/TFC_Servo.c **** #define FTM1_CLOCK           (CORE_CLOCK)
   5:../Sources/TFC/TFC_Servo.c **** #define FTM1_CLK_PRESCALE    6// Prescale Selector value - see comments in Status Control (SC) sect
   6:../Sources/TFC/TFC_Servo.c **** #define FTM1_OVERFLOW_FREQUENCY 50  // Desired Frequency of PWM Signal - Here 50Hz => 20ms period
   7:../Sources/TFC/TFC_Servo.c **** // use these to dial in servo steering to your particular servo
   8:../Sources/TFC/TFC_Servo.c **** #define SERVO_MIN_DUTY_CYCLE   750 // ->  5% DC (1ms)    //(float)(.0010*FTM1_OVERFLOW_FREQUENCY)  
   9:../Sources/TFC/TFC_Servo.c **** #define SERVO_MAX_DUTY_CYCLE   1500// -> 10% DC (2ms)    //(float)(.0020*FTM1_OVERFLOW_FREQUENCY)  
  10:../Sources/TFC/TFC_Servo.c **** /**********************************************************************************************/
  11:../Sources/TFC/TFC_Servo.c **** 
  12:../Sources/TFC/TFC_Servo.c **** 
  13:../Sources/TFC/TFC_Servo.c **** int16_t offsetServo = 200;
  14:../Sources/TFC/TFC_Servo.c **** //Position is -1000 to 1000 : pos in % *1000 (ex: 0.5*1000=500 -> 50% * 90°).  //  Use SERVO_X_MIN
  15:../Sources/TFC/TFC_Servo.c **** //          => -90° to 90°
  16:../Sources/TFC/TFC_Servo.c **** void TFC_SetServo(uint8_t ServoNumber, int16_t Position)
  17:../Sources/TFC/TFC_Servo.c **** {
  34              		.loc 1 17 0
  35              		.cfi_startproc
  36 0000 80B5     		push	{r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 84B0     		sub	sp, sp, #16
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 24
  44 0004 00AF     		add	r7, sp, #0
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  47 0006 0A1C     		mov	r2, r1
  48 0008 FB1D     		add	r3, r7, #7
  49 000a 011C     		add	r1, r0, #0
  50 000c 1970     		strb	r1, [r3]
  51 000e 3B1D     		add	r3, r7, #4
  52 0010 1A80     		strh	r2, [r3]
  18:../Sources/TFC/TFC_Servo.c ****     uint16_t DutyCycle=0;
  53              		.loc 1 18 0
  54 0012 3B1C     		mov	r3, r7
  55 0014 0E33     		add	r3, r3, #14
  56 0016 0022     		mov	r2, #0
  57 0018 1A80     		strh	r2, [r3]
  19:../Sources/TFC/TFC_Servo.c ****     Position += offsetServo; //Correct the offset of the servo 
  58              		.loc 1 19 0
  59 001a 3B1D     		add	r3, r7, #4
  60 001c 1A88     		ldrh	r2, [r3]
  61 001e 1D4B     		ldr	r3, .L4
  62 0020 1B88     		ldrh	r3, [r3]
  63 0022 9BB2     		uxth	r3, r3
  64 0024 D318     		add	r3, r2, r3
  65 0026 9AB2     		uxth	r2, r3
  66 0028 3B1D     		add	r3, r7, #4
  67 002a 1A80     		strh	r2, [r3]
  20:../Sources/TFC/TFC_Servo.c ****     
  21:../Sources/TFC/TFC_Servo.c **** 	/* application Range limitation for the Servo */
  22:../Sources/TFC/TFC_Servo.c **** 	if (Position < SERVOMIN)
  68              		.loc 1 22 0
  69 002c 3B1D     		add	r3, r7, #4
  70 002e 0021     		mov	r1, #0
  71 0030 5A5E     		ldrsh	r2, [r3, r1]
  72 0032 194B     		ldr	r3, .L4+4
  73 0034 9A42     		cmp	r2, r3
  74 0036 03DA     		bge	.L2
  23:../Sources/TFC/TFC_Servo.c **** 		Position = SERVOMIN;
  75              		.loc 1 23 0
  76 0038 3B1D     		add	r3, r7, #4
  77 003a 174A     		ldr	r2, .L4+4
  78 003c 1A80     		strh	r2, [r3]
  79 003e 0AE0     		b	.L3
  80              	.L2:
  24:../Sources/TFC/TFC_Servo.c **** 	else if (Position> SERVOMAX)
  81              		.loc 1 24 0
  82 0040 3B1D     		add	r3, r7, #4
  83 0042 0021     		mov	r1, #0
  84 0044 5A5E     		ldrsh	r2, [r3, r1]
  85 0046 9623     		mov	r3, #150
  86 0048 DB00     		lsl	r3, r3, #3
  87 004a 9A42     		cmp	r2, r3
  88 004c 03DD     		ble	.L3
  25:../Sources/TFC/TFC_Servo.c **** 		Position = SERVOMAX;
  89              		.loc 1 25 0
  90 004e 3B1D     		add	r3, r7, #4
  91 0050 9622     		mov	r2, #150
  92 0052 D200     		lsl	r2, r2, #3
  93 0054 1A80     		strh	r2, [r3]
  94              	.L3:
  26:../Sources/TFC/TFC_Servo.c ****     
  27:../Sources/TFC/TFC_Servo.c ****     //
  28:../Sources/TFC/TFC_Servo.c ****     // Counter Period: 20ms -> N=15000 (freq 750kHz)
  29:../Sources/TFC/TFC_Servo.c ****     // servo min     :pulse width: 1ms  -> 5%  DC -> N=750 : SERVO_MIN_DUTY_CYCLE
  30:../Sources/TFC/TFC_Servo.c ****     // servo center  :pulse width: 1.5ms-> 7.5%DC -> N=1125
  31:../Sources/TFC/TFC_Servo.c ****     // servo max     :pulse width: 2ms  -> 10% DC -> N=1500 : SERVO_MAX_DUTY_CYCLE
  32:../Sources/TFC/TFC_Servo.c ****     
  33:../Sources/TFC/TFC_Servo.c ****     DutyCycle = (Position+1000)*(SERVO_MAX_DUTY_CYCLE-SERVO_MIN_DUTY_CYCLE)/2000+SERVO_MIN_DUTY_CYC
  95              		.loc 1 33 0
  96 0056 3B1D     		add	r3, r7, #4
  97 0058 0022     		mov	r2, #0
  98 005a 9B5E     		ldrsh	r3, [r3, r2]
  99 005c 0F4A     		ldr	r2, .L4+8
 100 005e 5343     		mul	r3, r2
 101 0060 0F49     		ldr	r1, .L4+12
 102 0062 5B18     		add	r3, r3, r1
 103 0064 181C     		mov	r0, r3
 104 0066 FA23     		mov	r3, #250
 105 0068 D900     		lsl	r1, r3, #3
 106 006a FFF7FEFF 		bl	__aeabi_idiv
 107 006e 031C     		mov	r3, r0
 108 0070 9AB2     		uxth	r2, r3
 109 0072 3B1C     		mov	r3, r7
 110 0074 0E33     		add	r3, r3, #14
 111 0076 0949     		ldr	r1, .L4+8
 112 0078 5218     		add	r2, r2, r1
 113 007a 1A80     		strh	r2, [r3]
  34:../Sources/TFC/TFC_Servo.c **** 	TFC_SetServoDutyCycle(ServoNumber , DutyCycle );
 114              		.loc 1 34 0
 115 007c FB1D     		add	r3, r7, #7
 116 007e 1A78     		ldrb	r2, [r3]
 117 0080 3B1C     		mov	r3, r7
 118 0082 0E33     		add	r3, r3, #14
 119 0084 1B88     		ldrh	r3, [r3]
 120 0086 101C     		mov	r0, r2
 121 0088 191C     		mov	r1, r3
 122 008a FFF7FEFF 		bl	TFC_SetServoDutyCycle
  35:../Sources/TFC/TFC_Servo.c **** 
  36:../Sources/TFC/TFC_Servo.c **** }
 123              		.loc 1 36 0
 124 008e BD46     		mov	sp, r7
 125 0090 04B0     		add	sp, sp, #16
 126              		@ sp needed for prologue
 127 0092 80BD     		pop	{r7, pc}
 128              	.L5:
 129              		.align	2
 130              	.L4:
 131 0094 00000000 		.word	offsetServo
 132 0098 0CFEFFFF 		.word	-500
 133 009c EE020000 		.word	750
 134 00a0 B0710B00 		.word	750000
 135              		.cfi_endproc
 136              	.LFE0:
 138              		.section	.text.TFC_SetServoDutyCycle,"ax",%progbits
 139              		.align	2
 140              		.global	TFC_SetServoDutyCycle
 141              		.code	16
 142              		.thumb_func
 144              	TFC_SetServoDutyCycle:
 145              	.LFB1:
  37:../Sources/TFC/TFC_Servo.c **** 
  38:../Sources/TFC/TFC_Servo.c **** void TFC_SetServoDutyCycle(uint8_t ServoNumber, uint16_t DutyCycle) // DutyCycle : percent(int 16) 
  39:../Sources/TFC/TFC_Servo.c **** {
 146              		.loc 1 39 0
 147              		.cfi_startproc
 148 0000 80B5     		push	{r7, lr}
 149              	.LCFI3:
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 7, -8
 152              		.cfi_offset 14, -4
 153 0002 82B0     		sub	sp, sp, #8
 154              	.LCFI4:
 155              		.cfi_def_cfa_offset 16
 156 0004 00AF     		add	r7, sp, #0
 157              	.LCFI5:
 158              		.cfi_def_cfa_register 7
 159 0006 0A1C     		mov	r2, r1
 160 0008 FB1D     		add	r3, r7, #7
 161 000a 011C     		add	r1, r0, #0
 162 000c 1970     		strb	r1, [r3]
 163 000e 3B1D     		add	r3, r7, #4
 164 0010 1A80     		strh	r2, [r3]
  40:../Sources/TFC/TFC_Servo.c **** 	switch(ServoNumber)
 165              		.loc 1 40 0
 166 0012 FB1D     		add	r3, r7, #7
 167 0014 1B78     		ldrb	r3, [r3]
 168 0016 012B     		cmp	r3, #1
 169 0018 04D0     		beq	.L8
  41:../Sources/TFC/TFC_Servo.c **** 	{
  42:../Sources/TFC/TFC_Servo.c **** 	default:
  43:../Sources/TFC/TFC_Servo.c **** 	case 0:
  44:../Sources/TFC/TFC_Servo.c **** 		TPM1_C0V = DutyCycle;    //[0-15000], 15000<->20ms        // defaut: [(TPM1_MOD * DutyCycle); ]
 170              		.loc 1 44 0
 171 001a 064B     		ldr	r3, .L10
 172 001c 3A1D     		add	r2, r7, #4
 173 001e 1288     		ldrh	r2, [r2]
 174 0020 1A61     		str	r2, [r3, #16]
  45:../Sources/TFC/TFC_Servo.c **** 		break;
 175              		.loc 1 45 0
 176 0022 04E0     		b	.L6
 177              	.L8:
  46:../Sources/TFC/TFC_Servo.c **** 
  47:../Sources/TFC/TFC_Servo.c **** 	case 1:
  48:../Sources/TFC/TFC_Servo.c **** 		TPM1_C1V = DutyCycle;          //defaut:[(TPM1_MOD * DutyCycle); ]
 178              		.loc 1 48 0
 179 0024 034B     		ldr	r3, .L10
 180 0026 3A1D     		add	r2, r7, #4
 181 0028 1288     		ldrh	r2, [r2]
 182 002a 9A61     		str	r2, [r3, #24]
  49:../Sources/TFC/TFC_Servo.c **** 		break;
 183              		.loc 1 49 0
 184 002c C046     		mov	r8, r8
 185              	.L6:
  50:../Sources/TFC/TFC_Servo.c **** 	}
  51:../Sources/TFC/TFC_Servo.c **** }
 186              		.loc 1 51 0
 187 002e BD46     		mov	sp, r7
 188 0030 02B0     		add	sp, sp, #8
 189              		@ sp needed for prologue
 190 0032 80BD     		pop	{r7, pc}
 191              	.L11:
 192              		.align	2
 193              	.L10:
 194 0034 00900340 		.word	1073975296
 195              		.cfi_endproc
 196              	.LFE1:
 198              		.comm	ServoTickVar,1,1
 199              		.section	.text.FTM1_IRQHandler,"ax",%progbits
 200              		.align	2
 201              		.global	FTM1_IRQHandler
 202              		.code	16
 203              		.thumb_func
 205              	FTM1_IRQHandler:
 206              	.LFB2:
  52:../Sources/TFC/TFC_Servo.c **** 
  53:../Sources/TFC/TFC_Servo.c **** /******************************************* Function to control Interrupt ************************
  54:../Sources/TFC/TFC_Servo.c **** volatile unsigned char ServoTickVar;
  55:../Sources/TFC/TFC_Servo.c **** 
  56:../Sources/TFC/TFC_Servo.c **** void FTM1_IRQHandler()
  57:../Sources/TFC/TFC_Servo.c **** {
 207              		.loc 1 57 0
 208              		.cfi_startproc
 209 0000 80B5     		push	{r7, lr}
 210              	.LCFI6:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 00AF     		add	r7, sp, #0
 215              	.LCFI7:
 216              		.cfi_def_cfa_register 7
  58:../Sources/TFC/TFC_Servo.c **** 	//Clear the overflow mask if set.   According to the reference manual, we clear by writing a logic
  59:../Sources/TFC/TFC_Servo.c **** 	if(TPM1_SC & TPM_SC_TOF_MASK)
 217              		.loc 1 59 0
 218 0004 0C4B     		ldr	r3, .L15
 219 0006 1A68     		ldr	r2, [r3]
 220 0008 8023     		mov	r3, #128
 221 000a 1340     		and	r3, r2
 222 000c 05D0     		beq	.L13
  60:../Sources/TFC/TFC_Servo.c **** 		TPM1_SC |= TPM_SC_TOF_MASK;
 223              		.loc 1 60 0
 224 000e 0A4B     		ldr	r3, .L15
 225 0010 094A     		ldr	r2, .L15
 226 0012 1268     		ldr	r2, [r2]
 227 0014 8021     		mov	r1, #128
 228 0016 0A43     		orr	r2, r1
 229 0018 1A60     		str	r2, [r3]
 230              	.L13:
  61:../Sources/TFC/TFC_Servo.c **** 
  62:../Sources/TFC/TFC_Servo.c **** 	if (ServoTickVar < 0xff)//if servo tick less than 255 count up... 
 231              		.loc 1 62 0
 232 001a 084B     		ldr	r3, .L15+4
 233 001c 1B78     		ldrb	r3, [r3]
 234 001e DBB2     		uxtb	r3, r3
 235 0020 FF2B     		cmp	r3, #255
 236 0022 06D0     		beq	.L12
  63:../Sources/TFC/TFC_Servo.c **** 		ServoTickVar++;
 237              		.loc 1 63 0
 238 0024 054B     		ldr	r3, .L15+4
 239 0026 1B78     		ldrb	r3, [r3]
 240 0028 DBB2     		uxtb	r3, r3
 241 002a 0133     		add	r3, r3, #1
 242 002c DAB2     		uxtb	r2, r3
 243 002e 034B     		ldr	r3, .L15+4
 244 0030 1A70     		strb	r2, [r3]
 245              	.L12:
  64:../Sources/TFC/TFC_Servo.c **** 
  65:../Sources/TFC/TFC_Servo.c **** }
 246              		.loc 1 65 0
 247 0032 BD46     		mov	sp, r7
 248              		@ sp needed for prologue
 249 0034 80BD     		pop	{r7, pc}
 250              	.L16:
 251 0036 C046     		.align	2
 252              	.L15:
 253 0038 00900340 		.word	1073975296
 254 003c 00000000 		.word	ServoTickVar
 255              		.cfi_endproc
 256              	.LFE2:
 258              		.section	.text.TFC_InitServos,"ax",%progbits
 259              		.align	2
 260              		.global	TFC_InitServos
 261              		.code	16
 262              		.thumb_func
 264              	TFC_InitServos:
 265              	.LFB3:
  66:../Sources/TFC/TFC_Servo.c **** 
  67:../Sources/TFC/TFC_Servo.c **** void TFC_InitServos()
  68:../Sources/TFC/TFC_Servo.c **** {
 266              		.loc 1 68 0
 267              		.cfi_startproc
 268 0000 80B5     		push	{r7, lr}
 269              	.LCFI8:
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 00AF     		add	r7, sp, #0
 274              	.LCFI9:
 275              		.cfi_def_cfa_register 7
  69:../Sources/TFC/TFC_Servo.c **** 
  70:../Sources/TFC/TFC_Servo.c **** 	//Clock Setup for the TPM requires a couple steps.
  71:../Sources/TFC/TFC_Servo.c **** 
  72:../Sources/TFC/TFC_Servo.c **** 
  73:../Sources/TFC/TFC_Servo.c **** 
  74:../Sources/TFC/TFC_Servo.c **** 	//1st,  set the clock mux
  75:../Sources/TFC/TFC_Servo.c **** 	//See Page 124 of f the KL25 Sub-Family Reference Manual, Rev. 3, September 2012
  76:../Sources/TFC/TFC_Servo.c **** 	SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK;// We Want MCGPLLCLK/2 (See Page 196 of the KL25 Sub-Family 
 276              		.loc 1 76 0
 277 0004 2B4A     		ldr	r2, .L18
 278 0006 2B49     		ldr	r1, .L18
 279 0008 2B4B     		ldr	r3, .L18+4
 280 000a CB58     		ldr	r3, [r1, r3]
 281 000c 8021     		mov	r1, #128
 282 000e 4902     		lsl	r1, r1, #9
 283 0010 1943     		orr	r1, r3
 284 0012 294B     		ldr	r3, .L18+4
 285 0014 D150     		str	r1, [r2, r3]
  77:../Sources/TFC/TFC_Servo.c **** 	SIM_SOPT2 &= ~(SIM_SOPT2_TPMSRC_MASK);
 286              		.loc 1 77 0
 287 0016 274A     		ldr	r2, .L18
 288 0018 2649     		ldr	r1, .L18
 289 001a 274B     		ldr	r3, .L18+4
 290 001c C958     		ldr	r1, [r1, r3]
 291 001e 274B     		ldr	r3, .L18+8
 292 0020 1940     		and	r1, r3
 293 0022 254B     		ldr	r3, .L18+4
 294 0024 D150     		str	r1, [r2, r3]
  78:../Sources/TFC/TFC_Servo.c **** 	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(1); //We want the MCGPLLCLK/2 (See Page 196 of the KL25 Sub-Family R
 295              		.loc 1 78 0
 296 0026 234A     		ldr	r2, .L18
 297 0028 2249     		ldr	r1, .L18
 298 002a 234B     		ldr	r3, .L18+4
 299 002c CB58     		ldr	r3, [r1, r3]
 300 002e 8021     		mov	r1, #128
 301 0030 4904     		lsl	r1, r1, #17
 302 0032 1943     		orr	r1, r3
 303 0034 204B     		ldr	r3, .L18+4
 304 0036 D150     		str	r1, [r2, r3]
  79:../Sources/TFC/TFC_Servo.c **** 
  80:../Sources/TFC/TFC_Servo.c **** 
  81:../Sources/TFC/TFC_Servo.c **** 	//Enable the Clock to the FTM0 Module
  82:../Sources/TFC/TFC_Servo.c **** 	//See Page 207 of f the KL25 Sub-Family Reference Manual, Rev. 3, September 2012
  83:../Sources/TFC/TFC_Servo.c **** 	SIM_SCGC6 |= SIM_SCGC6_TPM1_MASK; 
 305              		.loc 1 83 0
 306 0038 1E4A     		ldr	r2, .L18
 307 003a 1E49     		ldr	r1, .L18
 308 003c 204B     		ldr	r3, .L18+12
 309 003e CB58     		ldr	r3, [r1, r3]
 310 0040 8021     		mov	r1, #128
 311 0042 8904     		lsl	r1, r1, #18
 312 0044 1943     		orr	r1, r3
 313 0046 1E4B     		ldr	r3, .L18+12
 314 0048 D150     		str	r1, [r2, r3]
  84:../Sources/TFC/TFC_Servo.c **** 
  85:../Sources/TFC/TFC_Servo.c **** 	//The TPM Module has Clock.  Now set up the peripheral
  86:../Sources/TFC/TFC_Servo.c **** 
  87:../Sources/TFC/TFC_Servo.c **** 	//Blow away the control registers to ensure that the counter is not running
  88:../Sources/TFC/TFC_Servo.c **** 	TPM1_SC = 0;
 315              		.loc 1 88 0
 316 004a 1E4B     		ldr	r3, .L18+16
 317 004c 0022     		mov	r2, #0
 318 004e 1A60     		str	r2, [r3]
  89:../Sources/TFC/TFC_Servo.c **** 	TPM1_CONF = 0;
 319              		.loc 1 89 0
 320 0050 1C4A     		ldr	r2, .L18+16
 321 0052 8423     		mov	r3, #132
 322 0054 0021     		mov	r1, #0
 323 0056 D150     		str	r1, [r2, r3]
  90:../Sources/TFC/TFC_Servo.c **** 
  91:../Sources/TFC/TFC_Servo.c **** 	//While the counter is disabled we can setup the prescaler
  92:../Sources/TFC/TFC_Servo.c **** 	TPM1_SC = TPM_SC_PS(5);//presc=32 -> clock TPM1: 750kHz                   defaut:[FTM1_CLK_PRESCAL
 324              		.loc 1 92 0
 325 0058 1A4B     		ldr	r3, .L18+16
 326 005a 0522     		mov	r2, #5
 327 005c 1A60     		str	r2, [r3]
  93:../Sources/TFC/TFC_Servo.c **** 	TPM1_SC |= TPM_SC_TOIE_MASK; //Enable Interrupts for the Timer Overflow
 328              		.loc 1 93 0
 329 005e 194B     		ldr	r3, .L18+16
 330 0060 184A     		ldr	r2, .L18+16
 331 0062 1268     		ldr	r2, [r2]
 332 0064 4021     		mov	r1, #64
 333 0066 0A43     		orr	r2, r1
 334 0068 1A60     		str	r2, [r3]
  94:../Sources/TFC/TFC_Servo.c **** 
  95:../Sources/TFC/TFC_Servo.c **** 	//Setup the mod register to get the correct PWM Period
  96:../Sources/TFC/TFC_Servo.c **** 	
  97:../Sources/TFC/TFC_Servo.c **** 	//DAN : Change to 10000 that seems working for this servo. So the period is < 20ms   
  98:../Sources/TFC/TFC_Servo.c **** 	TPM1_MOD =10000;// 15000 ; // freq servo = 50Hz -> P=20ms * 750kHz -> 15000    // defaut: [FTM1_CL
 335              		.loc 1 98 0
 336 006a 164B     		ldr	r3, .L18+16
 337 006c 164A     		ldr	r2, .L18+20
 338 006e 9A60     		str	r2, [r3, #8]
  99:../Sources/TFC/TFC_Servo.c **** 
 100:../Sources/TFC/TFC_Servo.c **** 	//Setup Channels 0 and 1 as PWM (counter up, output clear on match, set on reload)
 101:../Sources/TFC/TFC_Servo.c **** 	TPM1_C0SC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
 339              		.loc 1 101 0
 340 0070 144B     		ldr	r3, .L18+16
 341 0072 2822     		mov	r2, #40
 342 0074 DA60     		str	r2, [r3, #12]
 102:../Sources/TFC/TFC_Servo.c **** 	TPM1_C1SC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
 343              		.loc 1 102 0
 344 0076 134B     		ldr	r3, .L18+16
 345 0078 2822     		mov	r2, #40
 346 007a 5A61     		str	r2, [r3, #20]
 103:../Sources/TFC/TFC_Servo.c **** 
 104:../Sources/TFC/TFC_Servo.c **** 	//Enable the Counter
 105:../Sources/TFC/TFC_Servo.c **** 
 106:../Sources/TFC/TFC_Servo.c **** 	//Set the Default duty cycle to servo neutral
 107:../Sources/TFC/TFC_Servo.c **** 	TFC_SetServo(0, 0);
 347              		.loc 1 107 0
 348 007c 0020     		mov	r0, #0
 349 007e 0021     		mov	r1, #0
 350 0080 FFF7FEFF 		bl	TFC_SetServo
 108:../Sources/TFC/TFC_Servo.c **** 	TFC_SetServo(1, 0);
 351              		.loc 1 108 0
 352 0084 0120     		mov	r0, #1
 353 0086 0021     		mov	r1, #0
 354 0088 FFF7FEFF 		bl	TFC_SetServo
 109:../Sources/TFC/TFC_Servo.c **** 
 110:../Sources/TFC/TFC_Servo.c **** 	//Enable the TPM COunter
 111:../Sources/TFC/TFC_Servo.c **** 	TPM1_SC |= TPM_SC_CMOD(1);
 355              		.loc 1 111 0
 356 008c 0D4B     		ldr	r3, .L18+16
 357 008e 0D4A     		ldr	r2, .L18+16
 358 0090 1268     		ldr	r2, [r2]
 359 0092 0821     		mov	r1, #8
 360 0094 0A43     		orr	r2, r1
 361 0096 1A60     		str	r2, [r3]
 112:../Sources/TFC/TFC_Servo.c **** 
 113:../Sources/TFC/TFC_Servo.c **** 	//Enable TPM1 IRQ on the NVIC
 114:../Sources/TFC/TFC_Servo.c **** 	enable_irq (INT_TPM1-16);
 362              		.loc 1 114 0
 363 0098 1220     		mov	r0, #18
 364 009a FFF7FEFF 		bl	enable_irq
 115:../Sources/TFC/TFC_Servo.c **** 
 116:../Sources/TFC/TFC_Servo.c **** 	//Enable the FTM functions on the the port
 117:../Sources/TFC/TFC_Servo.c **** 
 118:../Sources/TFC/TFC_Servo.c **** 	PORTB_PCR0 = PORT_PCR_MUX(3);
 365              		.loc 1 118 0
 366 009e 0B4B     		ldr	r3, .L18+24
 367 00a0 C022     		mov	r2, #192
 368 00a2 9200     		lsl	r2, r2, #2
 369 00a4 1A60     		str	r2, [r3]
 119:../Sources/TFC/TFC_Servo.c **** 	PORTB_PCR1 = PORT_PCR_MUX(3);
 370              		.loc 1 119 0
 371 00a6 094B     		ldr	r3, .L18+24
 372 00a8 C022     		mov	r2, #192
 373 00aa 9200     		lsl	r2, r2, #2
 374 00ac 5A60     		str	r2, [r3, #4]
 120:../Sources/TFC/TFC_Servo.c **** 
 121:../Sources/TFC/TFC_Servo.c **** }
 375              		.loc 1 121 0
 376 00ae BD46     		mov	sp, r7
 377              		@ sp needed for prologue
 378 00b0 80BD     		pop	{r7, pc}
 379              	.L19:
 380 00b2 C046     		.align	2
 381              	.L18:
 382 00b4 00700440 		.word	1074032640
 383 00b8 04100000 		.word	4100
 384 00bc FFFFFFFC 		.word	-50331649
 385 00c0 3C100000 		.word	4156
 386 00c4 00900340 		.word	1073975296
 387 00c8 10270000 		.word	10000
 388 00cc 00A00440 		.word	1074044928
 389              		.cfi_endproc
 390              	.LFE3:
 392              		.text
 393              	.Letext0:
 394              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 395              		.file 3 "C:/Users/B48861/TFC/Carcode/Project_Headers/MKL25Z4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_Servo.c
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:22     .data.offsetServo:00000000 offsetServo
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:19     .data.offsetServo:00000000 $d
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:26     .text.TFC_SetServo:00000000 $t
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:31     .text.TFC_SetServo:00000000 TFC_SetServo
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:144    .text.TFC_SetServoDutyCycle:00000000 TFC_SetServoDutyCycle
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:131    .text.TFC_SetServo:00000094 $d
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:139    .text.TFC_SetServoDutyCycle:00000000 $t
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:194    .text.TFC_SetServoDutyCycle:00000034 $d
                            *COM*:00000001 ServoTickVar
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:200    .text.FTM1_IRQHandler:00000000 $t
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:205    .text.FTM1_IRQHandler:00000000 FTM1_IRQHandler
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:253    .text.FTM1_IRQHandler:00000038 $d
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:259    .text.TFC_InitServos:00000000 $t
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:264    .text.TFC_InitServos:00000000 TFC_InitServos
C:\Users\B48861\AppData\Local\Temp\ccxIxbVf.s:382    .text.TFC_InitServos:000000b4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_idiv
enable_irq
