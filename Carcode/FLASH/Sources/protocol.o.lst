   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"protocol.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	rx_frame,12,4
  18              		.comm	rx_frame_storage,2048,4
  19              		.comm	protocol_state,1,1
  20              		.comm	escape_state,1,1
  21              		.comm	SOF_,1,1
  22              		.comm	EOF_,1,1
  23              		.comm	ESC_,1,1
  24              		.section	.text.init_protocol,"ax",%progbits
  25              		.align	2
  26              		.global	init_protocol
  27              		.code	16
  28              		.thumb_func
  30              	init_protocol:
  31              	.LFB0:
  32              		.file 1 "../Sources/protocol.c"
   1:../Sources/protocol.c **** /*
   2:../Sources/protocol.c ****  * serial_protocol.c
   3:../Sources/protocol.c ****  *
   4:../Sources/protocol.c ****  *  Created on: Oct 22, 2014
   5:../Sources/protocol.c ****  *      Author: B48923
   6:../Sources/protocol.c ****  */
   7:../Sources/protocol.c **** 
   8:../Sources/protocol.c **** #include "protocol.h"
   9:../Sources/protocol.c **** #include "distantio.h"
  10:../Sources/protocol.c **** 
  11:../Sources/protocol.c **** ByteQueue rx_frame;
  12:../Sources/protocol.c **** uint8_t rx_frame_storage[INCOMING_FRAME_QUEUE_SIZE];
  13:../Sources/protocol.c **** 
  14:../Sources/protocol.c **** //Protocol state:
  15:../Sources/protocol.c **** state protocol_state;
  16:../Sources/protocol.c **** 
  17:../Sources/protocol.c **** //In case ESC character is received
  18:../Sources/protocol.c **** ESC_state escape_state;
  19:../Sources/protocol.c **** 
  20:../Sources/protocol.c **** uint8_t SOF_;
  21:../Sources/protocol.c **** uint8_t EOF_;
  22:../Sources/protocol.c **** uint8_t ESC_;
  23:../Sources/protocol.c **** 
  24:../Sources/protocol.c **** 
  25:../Sources/protocol.c **** void init_protocol()
  26:../Sources/protocol.c **** {
  33              		.loc 1 26 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
  27:../Sources/protocol.c **** 	InitByteQueue(&rx_frame,INCOMING_FRAME_QUEUE_SIZE,rx_frame_storage);
  43              		.loc 1 27 0
  44 0004 0C49     		ldr	r1, .L2
  45 0006 8023     		mov	r3, #128
  46 0008 1A01     		lsl	r2, r3, #4
  47 000a 0C4B     		ldr	r3, .L2+4
  48 000c 081C     		mov	r0, r1
  49 000e 111C     		mov	r1, r2
  50 0010 1A1C     		mov	r2, r3
  51 0012 FFF7FEFF 		bl	InitByteQueue
  28:../Sources/protocol.c **** 	protocol_state = IDLE;
  52              		.loc 1 28 0
  53 0016 0A4B     		ldr	r3, .L2+8
  54 0018 0022     		mov	r2, #0
  55 001a 1A70     		strb	r2, [r3]
  29:../Sources/protocol.c **** 	escape_state = NONE;
  56              		.loc 1 29 0
  57 001c 094B     		ldr	r3, .L2+12
  58 001e 0022     		mov	r2, #0
  59 0020 1A70     		strb	r2, [r3]
  30:../Sources/protocol.c **** 	
  31:../Sources/protocol.c **** 	SOF_ = 0xF7;
  60              		.loc 1 31 0
  61 0022 094B     		ldr	r3, .L2+16
  62 0024 F722     		mov	r2, #247
  63 0026 1A70     		strb	r2, [r3]
  32:../Sources/protocol.c **** 	EOF_ = 0x7F;
  64              		.loc 1 32 0
  65 0028 084B     		ldr	r3, .L2+20
  66 002a 7F22     		mov	r2, #127
  67 002c 1A70     		strb	r2, [r3]
  33:../Sources/protocol.c **** 	ESC_ = 0x7D;
  68              		.loc 1 33 0
  69 002e 084B     		ldr	r3, .L2+24
  70 0030 7D22     		mov	r2, #125
  71 0032 1A70     		strb	r2, [r3]
  34:../Sources/protocol.c **** }
  72              		.loc 1 34 0
  73 0034 BD46     		mov	sp, r7
  74              		@ sp needed for prologue
  75 0036 80BD     		pop	{r7, pc}
  76              	.L3:
  77              		.align	2
  78              	.L2:
  79 0038 00000000 		.word	rx_frame
  80 003c 00000000 		.word	rx_frame_storage
  81 0040 00000000 		.word	protocol_state
  82 0044 00000000 		.word	escape_state
  83 0048 00000000 		.word	SOF_
  84 004c 00000000 		.word	EOF_
  85 0050 00000000 		.word	ESC_
  86              		.cfi_endproc
  87              	.LFE0:
  89              		.section	.text.protocol_frame,"ax",%progbits
  90              		.align	2
  91              		.global	protocol_frame
  92              		.code	16
  93              		.thumb_func
  95              	protocol_frame:
  96              	.LFB1:
  35:../Sources/protocol.c **** 
  36:../Sources/protocol.c **** void protocol_frame(uint8_t* framedata, uint16_t framesize)
  37:../Sources/protocol.c **** {
  97              		.loc 1 37 0
  98              		.cfi_startproc
  99 0000 80B5     		push	{r7, lr}
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 7, -8
 103              		.cfi_offset 14, -4
 104 0002 84B0     		sub	sp, sp, #16
 105              	.LCFI3:
 106              		.cfi_def_cfa_offset 24
 107 0004 00AF     		add	r7, sp, #0
 108              	.LCFI4:
 109              		.cfi_def_cfa_register 7
 110 0006 7860     		str	r0, [r7, #4]
 111 0008 0A1C     		mov	r2, r1
 112 000a BB1C     		add	r3, r7, #2
 113 000c 1A80     		strh	r2, [r3]
  38:../Sources/protocol.c **** 	uint16_t i;
  39:../Sources/protocol.c **** 	
  40:../Sources/protocol.c **** 	//Write start of frame byte
  41:../Sources/protocol.c **** 	serial_write(&SOF_,1);
 114              		.loc 1 41 0
 115 000e 264B     		ldr	r3, .L9
 116 0010 181C     		mov	r0, r3
 117 0012 0121     		mov	r1, #1
 118 0014 FFF7FEFF 		bl	serial_write
  42:../Sources/protocol.c **** 	
  43:../Sources/protocol.c **** 	//Write data
  44:../Sources/protocol.c **** 	for(i = 0 ; i < framesize ; i++)
 119              		.loc 1 44 0
 120 0018 3B1C     		mov	r3, r7
 121 001a 0E33     		add	r3, r3, #14
 122 001c 0022     		mov	r2, #0
 123 001e 1A80     		strh	r2, [r3]
 124 0020 32E0     		b	.L5
 125              	.L8:
  45:../Sources/protocol.c **** 	{
  46:../Sources/protocol.c **** 		//See serial_protocols_definition.xlsx
  47:../Sources/protocol.c **** 		if(*(framedata + i) == SOF_ ||
 126              		.loc 1 47 0
 127 0022 3B1C     		mov	r3, r7
 128 0024 0E33     		add	r3, r3, #14
 129 0026 1B88     		ldrh	r3, [r3]
 130 0028 7A68     		ldr	r2, [r7, #4]
 131 002a D318     		add	r3, r2, r3
 132 002c 1A78     		ldrb	r2, [r3]
 133 002e 1E4B     		ldr	r3, .L9
 134 0030 1B78     		ldrb	r3, [r3]
 135 0032 9A42     		cmp	r2, r3
 136 0034 13D0     		beq	.L6
  48:../Sources/protocol.c **** 		   *(framedata + i) == EOF_ ||
 137              		.loc 1 48 0
 138 0036 3B1C     		mov	r3, r7
 139 0038 0E33     		add	r3, r3, #14
 140 003a 1B88     		ldrh	r3, [r3]
 141 003c 7A68     		ldr	r2, [r7, #4]
 142 003e D318     		add	r3, r2, r3
 143 0040 1A78     		ldrb	r2, [r3]
 144 0042 1A4B     		ldr	r3, .L9+4
 145 0044 1B78     		ldrb	r3, [r3]
  47:../Sources/protocol.c **** 		if(*(framedata + i) == SOF_ ||
 146              		.loc 1 47 0
 147 0046 9A42     		cmp	r2, r3
 148 0048 09D0     		beq	.L6
  49:../Sources/protocol.c **** 		   *(framedata + i) == ESC_)
 149              		.loc 1 49 0
 150 004a 3B1C     		mov	r3, r7
 151 004c 0E33     		add	r3, r3, #14
 152 004e 1B88     		ldrh	r3, [r3]
 153 0050 7A68     		ldr	r2, [r7, #4]
 154 0052 D318     		add	r3, r2, r3
 155 0054 1A78     		ldrb	r2, [r3]
 156 0056 164B     		ldr	r3, .L9+8
 157 0058 1B78     		ldrb	r3, [r3]
  48:../Sources/protocol.c **** 		   *(framedata + i) == EOF_ ||
 158              		.loc 1 48 0
 159 005a 9A42     		cmp	r2, r3
 160 005c 04D1     		bne	.L7
 161              	.L6:
  50:../Sources/protocol.c **** 		{
  51:../Sources/protocol.c **** 			//If data contains one of the flags, we escape it before
  52:../Sources/protocol.c **** 			serial_write(&ESC_,1);
 162              		.loc 1 52 0
 163 005e 144B     		ldr	r3, .L9+8
 164 0060 181C     		mov	r0, r3
 165 0062 0121     		mov	r1, #1
 166 0064 FFF7FEFF 		bl	serial_write
 167              	.L7:
  53:../Sources/protocol.c **** 			
  54:../Sources/protocol.c **** 		}
  55:../Sources/protocol.c **** 		serial_write(framedata + i,1);
 168              		.loc 1 55 0
 169 0068 3B1C     		mov	r3, r7
 170 006a 0E33     		add	r3, r3, #14
 171 006c 1B88     		ldrh	r3, [r3]
 172 006e 7A68     		ldr	r2, [r7, #4]
 173 0070 D318     		add	r3, r2, r3
 174 0072 181C     		mov	r0, r3
 175 0074 0121     		mov	r1, #1
 176 0076 FFF7FEFF 		bl	serial_write
  44:../Sources/protocol.c **** 	for(i = 0 ; i < framesize ; i++)
 177              		.loc 1 44 0
 178 007a 3B1C     		mov	r3, r7
 179 007c 0E33     		add	r3, r3, #14
 180 007e 3A1C     		mov	r2, r7
 181 0080 0E32     		add	r2, r2, #14
 182 0082 1288     		ldrh	r2, [r2]
 183 0084 0132     		add	r2, r2, #1
 184 0086 1A80     		strh	r2, [r3]
 185              	.L5:
  44:../Sources/protocol.c **** 	for(i = 0 ; i < framesize ; i++)
 186              		.loc 1 44 0 is_stmt 0
 187 0088 3A1C     		mov	r2, r7
 188 008a 0E32     		add	r2, r2, #14
 189 008c BB1C     		add	r3, r7, #2
 190 008e 1288     		ldrh	r2, [r2]
 191 0090 1B88     		ldrh	r3, [r3]
 192 0092 9A42     		cmp	r2, r3
 193 0094 C5D3     		bcc	.L8
  56:../Sources/protocol.c **** 	}
  57:../Sources/protocol.c **** 	
  58:../Sources/protocol.c **** 	//Set EOFrame
  59:../Sources/protocol.c **** 	serial_write(&EOF_,1);	
 194              		.loc 1 59 0 is_stmt 1
 195 0096 054B     		ldr	r3, .L9+4
 196 0098 181C     		mov	r0, r3
 197 009a 0121     		mov	r1, #1
 198 009c FFF7FEFF 		bl	serial_write
  60:../Sources/protocol.c **** }
 199              		.loc 1 60 0
 200 00a0 BD46     		mov	sp, r7
 201 00a2 04B0     		add	sp, sp, #16
 202              		@ sp needed for prologue
 203 00a4 80BD     		pop	{r7, pc}
 204              	.L10:
 205 00a6 C046     		.align	2
 206              	.L9:
 207 00a8 00000000 		.word	SOF_
 208 00ac 00000000 		.word	EOF_
 209 00b0 00000000 		.word	ESC_
 210              		.cfi_endproc
 211              	.LFE1:
 213              		.section	.text.protocol_frame_begin,"ax",%progbits
 214              		.align	2
 215              		.global	protocol_frame_begin
 216              		.code	16
 217              		.thumb_func
 219              	protocol_frame_begin:
 220              	.LFB2:
  61:../Sources/protocol.c **** 
  62:../Sources/protocol.c **** 
  63:../Sources/protocol.c **** 
  64:../Sources/protocol.c **** void protocol_frame_begin()
  65:../Sources/protocol.c **** {	
 221              		.loc 1 65 0
 222              		.cfi_startproc
 223 0000 80B5     		push	{r7, lr}
 224              	.LCFI5:
 225              		.cfi_def_cfa_offset 8
 226              		.cfi_offset 7, -8
 227              		.cfi_offset 14, -4
 228 0002 00AF     		add	r7, sp, #0
 229              	.LCFI6:
 230              		.cfi_def_cfa_register 7
  66:../Sources/protocol.c **** 	//Write start of frame byte
  67:../Sources/protocol.c **** 	serial_write(&SOF_,1);
 231              		.loc 1 67 0
 232 0004 034B     		ldr	r3, .L12
 233 0006 181C     		mov	r0, r3
 234 0008 0121     		mov	r1, #1
 235 000a FFF7FEFF 		bl	serial_write
  68:../Sources/protocol.c **** }
 236              		.loc 1 68 0
 237 000e BD46     		mov	sp, r7
 238              		@ sp needed for prologue
 239 0010 80BD     		pop	{r7, pc}
 240              	.L13:
 241 0012 C046     		.align	2
 242              	.L12:
 243 0014 00000000 		.word	SOF_
 244              		.cfi_endproc
 245              	.LFE2:
 247              		.section	.text.protocol_frame_append,"ax",%progbits
 248              		.align	2
 249              		.global	protocol_frame_append
 250              		.code	16
 251              		.thumb_func
 253              	protocol_frame_append:
 254              	.LFB3:
  69:../Sources/protocol.c **** 
  70:../Sources/protocol.c **** void protocol_frame_append(uint8_t* framedata,uint16_t framesize)
  71:../Sources/protocol.c **** {
 255              		.loc 1 71 0
 256              		.cfi_startproc
 257 0000 80B5     		push	{r7, lr}
 258              	.LCFI7:
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 7, -8
 261              		.cfi_offset 14, -4
 262 0002 84B0     		sub	sp, sp, #16
 263              	.LCFI8:
 264              		.cfi_def_cfa_offset 24
 265 0004 00AF     		add	r7, sp, #0
 266              	.LCFI9:
 267              		.cfi_def_cfa_register 7
 268 0006 7860     		str	r0, [r7, #4]
 269 0008 0A1C     		mov	r2, r1
 270 000a BB1C     		add	r3, r7, #2
 271 000c 1A80     		strh	r2, [r3]
  72:../Sources/protocol.c **** 	uint16_t i;
  73:../Sources/protocol.c **** 	//Write data
  74:../Sources/protocol.c **** 	for(i = 0 ; i < framesize ; i++)
 272              		.loc 1 74 0
 273 000e 3B1C     		mov	r3, r7
 274 0010 0E33     		add	r3, r3, #14
 275 0012 0022     		mov	r2, #0
 276 0014 1A80     		strh	r2, [r3]
 277 0016 32E0     		b	.L15
 278              	.L18:
  75:../Sources/protocol.c **** 	{
  76:../Sources/protocol.c **** 		//See serial_protocols_definition.xlsx
  77:../Sources/protocol.c **** 		if(framedata[i] == SOF_ ||
 279              		.loc 1 77 0
 280 0018 3B1C     		mov	r3, r7
 281 001a 0E33     		add	r3, r3, #14
 282 001c 1B88     		ldrh	r3, [r3]
 283 001e 7A68     		ldr	r2, [r7, #4]
 284 0020 D318     		add	r3, r2, r3
 285 0022 1A78     		ldrb	r2, [r3]
 286 0024 1B4B     		ldr	r3, .L19
 287 0026 1B78     		ldrb	r3, [r3]
 288 0028 9A42     		cmp	r2, r3
 289 002a 13D0     		beq	.L16
  78:../Sources/protocol.c **** 		   framedata[i] == EOF_ ||
 290              		.loc 1 78 0
 291 002c 3B1C     		mov	r3, r7
 292 002e 0E33     		add	r3, r3, #14
 293 0030 1B88     		ldrh	r3, [r3]
 294 0032 7A68     		ldr	r2, [r7, #4]
 295 0034 D318     		add	r3, r2, r3
 296 0036 1A78     		ldrb	r2, [r3]
 297 0038 174B     		ldr	r3, .L19+4
 298 003a 1B78     		ldrb	r3, [r3]
  77:../Sources/protocol.c **** 		if(framedata[i] == SOF_ ||
 299              		.loc 1 77 0
 300 003c 9A42     		cmp	r2, r3
 301 003e 09D0     		beq	.L16
  79:../Sources/protocol.c **** 		   framedata[i] == ESC_)
 302              		.loc 1 79 0
 303 0040 3B1C     		mov	r3, r7
 304 0042 0E33     		add	r3, r3, #14
 305 0044 1B88     		ldrh	r3, [r3]
 306 0046 7A68     		ldr	r2, [r7, #4]
 307 0048 D318     		add	r3, r2, r3
 308 004a 1A78     		ldrb	r2, [r3]
 309 004c 134B     		ldr	r3, .L19+8
 310 004e 1B78     		ldrb	r3, [r3]
  78:../Sources/protocol.c **** 		   framedata[i] == EOF_ ||
 311              		.loc 1 78 0
 312 0050 9A42     		cmp	r2, r3
 313 0052 04D1     		bne	.L17
 314              	.L16:
  80:../Sources/protocol.c **** 		{
  81:../Sources/protocol.c **** 			//If data contains one of the flags, we escape it before
  82:../Sources/protocol.c **** 			serial_write(&ESC_,1);
 315              		.loc 1 82 0
 316 0054 114B     		ldr	r3, .L19+8
 317 0056 181C     		mov	r0, r3
 318 0058 0121     		mov	r1, #1
 319 005a FFF7FEFF 		bl	serial_write
 320              	.L17:
  83:../Sources/protocol.c **** 		}
  84:../Sources/protocol.c **** 		serial_write(framedata + i,1);
 321              		.loc 1 84 0
 322 005e 3B1C     		mov	r3, r7
 323 0060 0E33     		add	r3, r3, #14
 324 0062 1B88     		ldrh	r3, [r3]
 325 0064 7A68     		ldr	r2, [r7, #4]
 326 0066 D318     		add	r3, r2, r3
 327 0068 181C     		mov	r0, r3
 328 006a 0121     		mov	r1, #1
 329 006c FFF7FEFF 		bl	serial_write
  74:../Sources/protocol.c **** 	for(i = 0 ; i < framesize ; i++)
 330              		.loc 1 74 0
 331 0070 3B1C     		mov	r3, r7
 332 0072 0E33     		add	r3, r3, #14
 333 0074 3A1C     		mov	r2, r7
 334 0076 0E32     		add	r2, r2, #14
 335 0078 1288     		ldrh	r2, [r2]
 336 007a 0132     		add	r2, r2, #1
 337 007c 1A80     		strh	r2, [r3]
 338              	.L15:
  74:../Sources/protocol.c **** 	for(i = 0 ; i < framesize ; i++)
 339              		.loc 1 74 0 is_stmt 0
 340 007e 3A1C     		mov	r2, r7
 341 0080 0E32     		add	r2, r2, #14
 342 0082 BB1C     		add	r3, r7, #2
 343 0084 1288     		ldrh	r2, [r2]
 344 0086 1B88     		ldrh	r3, [r3]
 345 0088 9A42     		cmp	r2, r3
 346 008a C5D3     		bcc	.L18
  85:../Sources/protocol.c **** 	}
  86:../Sources/protocol.c **** }
 347              		.loc 1 86 0 is_stmt 1
 348 008c BD46     		mov	sp, r7
 349 008e 04B0     		add	sp, sp, #16
 350              		@ sp needed for prologue
 351 0090 80BD     		pop	{r7, pc}
 352              	.L20:
 353 0092 C046     		.align	2
 354              	.L19:
 355 0094 00000000 		.word	SOF_
 356 0098 00000000 		.word	EOF_
 357 009c 00000000 		.word	ESC_
 358              		.cfi_endproc
 359              	.LFE3:
 361              		.section	.text.protocol_frame_end,"ax",%progbits
 362              		.align	2
 363              		.global	protocol_frame_end
 364              		.code	16
 365              		.thumb_func
 367              	protocol_frame_end:
 368              	.LFB4:
  87:../Sources/protocol.c **** 
  88:../Sources/protocol.c **** void protocol_frame_end()
  89:../Sources/protocol.c **** {	
 369              		.loc 1 89 0
 370              		.cfi_startproc
 371 0000 80B5     		push	{r7, lr}
 372              	.LCFI10:
 373              		.cfi_def_cfa_offset 8
 374              		.cfi_offset 7, -8
 375              		.cfi_offset 14, -4
 376 0002 00AF     		add	r7, sp, #0
 377              	.LCFI11:
 378              		.cfi_def_cfa_register 7
  90:../Sources/protocol.c **** 	//Set EOFrame
  91:../Sources/protocol.c **** 	serial_write(&EOF_,1);	
 379              		.loc 1 91 0
 380 0004 034B     		ldr	r3, .L22
 381 0006 181C     		mov	r0, r3
 382 0008 0121     		mov	r1, #1
 383 000a FFF7FEFF 		bl	serial_write
  92:../Sources/protocol.c **** }
 384              		.loc 1 92 0
 385 000e BD46     		mov	sp, r7
 386              		@ sp needed for prologue
 387 0010 80BD     		pop	{r7, pc}
 388              	.L23:
 389 0012 C046     		.align	2
 390              	.L22:
 391 0014 00000000 		.word	EOF_
 392              		.cfi_endproc
 393              	.LFE4:
 395              		.section	.text.protocol_process_rx,"ax",%progbits
 396              		.align	2
 397              		.global	protocol_process_rx
 398              		.code	16
 399              		.thumb_func
 401              	protocol_process_rx:
 402              	.LFB5:
  93:../Sources/protocol.c **** 
  94:../Sources/protocol.c **** 
  95:../Sources/protocol.c **** void protocol_process_rx()
  96:../Sources/protocol.c **** {
 403              		.loc 1 96 0
 404              		.cfi_startproc
 405 0000 90B5     		push	{r4, r7, lr}
 406              	.LCFI12:
 407              		.cfi_def_cfa_offset 12
 408              		.cfi_offset 4, -12
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 83B0     		sub	sp, sp, #12
 412              	.LCFI13:
 413              		.cfi_def_cfa_offset 24
 414 0004 00AF     		add	r7, sp, #0
 415              	.LCFI14:
 416              		.cfi_def_cfa_register 7
  97:../Sources/protocol.c **** 	uint8_t received_byte;
  98:../Sources/protocol.c **** 	
  99:../Sources/protocol.c **** 	//Process received bytes
 100:../Sources/protocol.c **** 	while(serial_available())
 417              		.loc 1 100 0
 418 0006 40E0     		b	.L25
 419              	.L30:
 101:../Sources/protocol.c **** 	{
 102:../Sources/protocol.c **** 		received_byte = serial_read();
 420              		.loc 1 102 0
 421 0008 FC1D     		add	r4, r7, #7
 422 000a FFF7FEFF 		bl	serial_read
 423 000e 031C     		mov	r3, r0
 424 0010 2370     		strb	r3, [r4]
 103:../Sources/protocol.c **** 		
 104:../Sources/protocol.c **** 		//If a reception was in process
 105:../Sources/protocol.c **** 		if(protocol_state == IN_PROCESS)
 425              		.loc 1 105 0
 426 0012 224B     		ldr	r3, .L31
 427 0014 1B78     		ldrb	r3, [r3]
 428 0016 012B     		cmp	r3, #1
 429 0018 2ED1     		bne	.L26
 106:../Sources/protocol.c **** 		{
 107:../Sources/protocol.c **** 			//If the character must be ignored as SOF, EOF or ESC
 108:../Sources/protocol.c **** 			if(escape_state == NEXT)
 430              		.loc 1 108 0
 431 001a 214B     		ldr	r3, .L31+4
 432 001c 1B78     		ldrb	r3, [r3]
 433 001e 012B     		cmp	r3, #1
 434 0020 0AD1     		bne	.L27
 109:../Sources/protocol.c **** 			{
 110:../Sources/protocol.c **** 				ByteEnqueue(&rx_frame,received_byte);
 435              		.loc 1 110 0
 436 0022 204A     		ldr	r2, .L31+8
 437 0024 FB1D     		add	r3, r7, #7
 438 0026 1B78     		ldrb	r3, [r3]
 439 0028 101C     		mov	r0, r2
 440 002a 191C     		mov	r1, r3
 441 002c FFF7FEFF 		bl	ByteEnqueue
 111:../Sources/protocol.c **** 				escape_state = NONE;
 442              		.loc 1 111 0
 443 0030 1B4B     		ldr	r3, .L31+4
 444 0032 0022     		mov	r2, #0
 445 0034 1A70     		strb	r2, [r3]
 446 0036 28E0     		b	.L25
 447              	.L27:
 112:../Sources/protocol.c **** 			}
 113:../Sources/protocol.c **** 			else
 114:../Sources/protocol.c **** 			{
 115:../Sources/protocol.c **** 				if(received_byte == EOF_)
 448              		.loc 1 115 0
 449 0038 1B4B     		ldr	r3, .L31+12
 450 003a 1B78     		ldrb	r3, [r3]
 451 003c FA1D     		add	r2, r7, #7
 452 003e 1278     		ldrb	r2, [r2]
 453 0040 9A42     		cmp	r2, r3
 454 0042 07D1     		bne	.L28
 116:../Sources/protocol.c **** 				{
 117:../Sources/protocol.c **** 					protocol_state = IDLE;
 455              		.loc 1 117 0
 456 0044 154B     		ldr	r3, .L31
 457 0046 0022     		mov	r2, #0
 458 0048 1A70     		strb	r2, [r3]
 118:../Sources/protocol.c **** 					distantio_decode_rx_frame(&rx_frame);
 459              		.loc 1 118 0
 460 004a 164B     		ldr	r3, .L31+8
 461 004c 181C     		mov	r0, r3
 462 004e FFF7FEFF 		bl	distantio_decode_rx_frame
 463 0052 1AE0     		b	.L25
 464              	.L28:
 119:../Sources/protocol.c **** 					
 120:../Sources/protocol.c **** 				}
 121:../Sources/protocol.c **** 				else if(received_byte == ESC_)
 465              		.loc 1 121 0
 466 0054 154B     		ldr	r3, .L31+16
 467 0056 1B78     		ldrb	r3, [r3]
 468 0058 FA1D     		add	r2, r7, #7
 469 005a 1278     		ldrb	r2, [r2]
 470 005c 9A42     		cmp	r2, r3
 471 005e 03D1     		bne	.L29
 122:../Sources/protocol.c **** 				{
 123:../Sources/protocol.c **** 					escape_state = NEXT;
 472              		.loc 1 123 0
 473 0060 0F4B     		ldr	r3, .L31+4
 474 0062 0122     		mov	r2, #1
 475 0064 1A70     		strb	r2, [r3]
 476 0066 10E0     		b	.L25
 477              	.L29:
 124:../Sources/protocol.c **** 				}
 125:../Sources/protocol.c **** 				else
 126:../Sources/protocol.c **** 				{
 127:../Sources/protocol.c **** 					ByteEnqueue(&rx_frame,received_byte);
 478              		.loc 1 127 0
 479 0068 0E4A     		ldr	r2, .L31+8
 480 006a FB1D     		add	r3, r7, #7
 481 006c 1B78     		ldrb	r3, [r3]
 482 006e 101C     		mov	r0, r2
 483 0070 191C     		mov	r1, r3
 484 0072 FFF7FEFF 		bl	ByteEnqueue
 485 0076 08E0     		b	.L25
 486              	.L26:
 128:../Sources/protocol.c **** 				}
 129:../Sources/protocol.c **** 			}
 130:../Sources/protocol.c **** 		}
 131:../Sources/protocol.c **** 		else
 132:../Sources/protocol.c **** 		{
 133:../Sources/protocol.c **** 			if(received_byte == SOF_)
 487              		.loc 1 133 0
 488 0078 0D4B     		ldr	r3, .L31+20
 489 007a 1B78     		ldrb	r3, [r3]
 490 007c FA1D     		add	r2, r7, #7
 491 007e 1278     		ldrb	r2, [r2]
 492 0080 9A42     		cmp	r2, r3
 493 0082 02D1     		bne	.L25
 134:../Sources/protocol.c **** 			{
 135:../Sources/protocol.c **** 				protocol_state = IN_PROCESS;
 494              		.loc 1 135 0
 495 0084 054B     		ldr	r3, .L31
 496 0086 0122     		mov	r2, #1
 497 0088 1A70     		strb	r2, [r3]
 498              	.L25:
 100:../Sources/protocol.c **** 	while(serial_available())
 499              		.loc 1 100 0
 500 008a FFF7FEFF 		bl	serial_available
 501 008e 031C     		mov	r3, r0
 502 0090 002B     		cmp	r3, #0
 503 0092 B9D1     		bne	.L30
 136:../Sources/protocol.c **** 			}
 137:../Sources/protocol.c **** 			else
 138:../Sources/protocol.c **** 			{
 139:../Sources/protocol.c **** 				//Ignore character
 140:../Sources/protocol.c **** 				//Could dump into secondary queue
 141:../Sources/protocol.c **** 			}
 142:../Sources/protocol.c **** 		}
 143:../Sources/protocol.c **** 		
 144:../Sources/protocol.c **** 	}
 145:../Sources/protocol.c **** }
 504              		.loc 1 145 0
 505 0094 BD46     		mov	sp, r7
 506 0096 03B0     		add	sp, sp, #12
 507              		@ sp needed for prologue
 508 0098 90BD     		pop	{r4, r7, pc}
 509              	.L32:
 510 009a C046     		.align	2
 511              	.L31:
 512 009c 00000000 		.word	protocol_state
 513 00a0 00000000 		.word	escape_state
 514 00a4 00000000 		.word	rx_frame
 515 00a8 00000000 		.word	EOF_
 516 00ac 00000000 		.word	ESC_
 517 00b0 00000000 		.word	SOF_
 518              		.cfi_endproc
 519              	.LFE5:
 521              		.text
 522              	.Letext0:
 523              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 524              		.file 3 "C:/Users/B48861/TFC/Carcode/Project_Headers/TFC\\TFC_Queue.h"
 525              		.file 4 "C:/Users/B48861/TFC/Carcode/Project_Headers/protocol.h"
DEFINED SYMBOLS
                            *ABS*:00000000 protocol.c
                            *COM*:0000000c rx_frame
                            *COM*:00000800 rx_frame_storage
                            *COM*:00000001 protocol_state
                            *COM*:00000001 escape_state
                            *COM*:00000001 SOF_
                            *COM*:00000001 EOF_
                            *COM*:00000001 ESC_
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:25     .text.init_protocol:00000000 $t
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:30     .text.init_protocol:00000000 init_protocol
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:79     .text.init_protocol:00000038 $d
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:90     .text.protocol_frame:00000000 $t
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:95     .text.protocol_frame:00000000 protocol_frame
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:207    .text.protocol_frame:000000a8 $d
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:214    .text.protocol_frame_begin:00000000 $t
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:219    .text.protocol_frame_begin:00000000 protocol_frame_begin
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:243    .text.protocol_frame_begin:00000014 $d
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:248    .text.protocol_frame_append:00000000 $t
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:253    .text.protocol_frame_append:00000000 protocol_frame_append
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:355    .text.protocol_frame_append:00000094 $d
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:362    .text.protocol_frame_end:00000000 $t
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:367    .text.protocol_frame_end:00000000 protocol_frame_end
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:391    .text.protocol_frame_end:00000014 $d
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:396    .text.protocol_process_rx:00000000 $t
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:401    .text.protocol_process_rx:00000000 protocol_process_rx
C:\Users\B48861\AppData\Local\Temp\cctO3yRg.s:512    .text.protocol_process_rx:0000009c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
InitByteQueue
serial_write
serial_read
ByteEnqueue
distantio_decode_rx_frame
serial_available
